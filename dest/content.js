!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).getCssUsed=e()}}(function(){var e=function(e){var t;return function(r){return t||e(t={exports:{},parent:r},t.exports),t.exports}},t=e(function(e,t){"use strict";t.__esModule=!0,t.default=void 0;var n=h(T),o=h(Xt),s=h(R),u=h(i({})),c=h(r({})),l=h(a({}));function h(e){return e&&e.__esModule?e:{default:e}}var f=function(){function e(e){this.input=e,this.root=new c.default,this.current=this.root,this.spaces="",this.semicolon=!1,this.createTokenizer(),this.root.source={input:e,start:{line:1,column:1}}}var t=e.prototype;return t.createTokenizer=function(){this.tokenizer=(0,o.default)(this.input)},t.parse=function(){for(var e;!this.tokenizer.endOfFile();)switch((e=this.tokenizer.nextToken())[0]){case"space":this.spaces+=e[1];break;case";":this.freeSemicolon(e);break;case"}":this.end(e);break;case"comment":this.comment(e);break;case"at-word":this.atrule(e);break;case"{":this.emptyRule(e);break;default:this.other(e)}this.endFile()},t.comment=function(e){var t=new s.default;this.init(t,e[2],e[3]),t.source.end={line:e[4],column:e[5]};var r=e[1].slice(2,-2);if(/^\s*$/.test(r))t.text="",t.raws.left=r,t.raws.right="";else{var n=r.match(/^(\s*)([^]*[^\s])(\s*)$/);t.text=n[2],t.raws.left=n[1],t.raws.right=n[3]}},t.emptyRule=function(e){var t=new l.default;this.init(t,e[2],e[3]),t.selector="",t.raws.between="",this.current=t},t.other=function(e){for(var t=!1,r=null,n=!1,o=null,i=[],s=[],a=e;a;){if(r=a[0],s.push(a),"("===r||"["===r)o||(o=a),i.push("("===r?")":"]");else if(0===i.length){if(";"===r){if(n)return void this.decl(s);break}if("{"===r)return void this.rule(s);if("}"===r){this.tokenizer.back(s.pop()),t=!0;break}":"===r&&(n=!0)}else r===i[i.length-1]&&(i.pop(),0===i.length&&(o=null));a=this.tokenizer.nextToken()}if(this.tokenizer.endOfFile()&&(t=!0),i.length>0&&this.unclosedBracket(o),t&&n){for(;s.length&&("space"===(a=s[s.length-1][0])||"comment"===a);)this.tokenizer.back(s.pop());this.decl(s)}else this.unknownWord(s)},t.rule=function(e){e.pop();var t=new l.default;this.init(t,e[0][2],e[0][3]),t.raws.between=this.spacesAndCommentsFromEnd(e),this.raw(t,"selector",e),this.current=t},t.decl=function(e){var t=new n.default;this.init(t);var r,o=e[e.length-1];for(";"===o[0]&&(this.semicolon=!0,e.pop()),o[4]?t.source.end={line:o[4],column:o[5]}:t.source.end={line:o[2],column:o[3]};"word"!==e[0][0];)1===e.length&&this.unknownWord(e),t.raws.before+=e.shift()[1];for(t.source.start={line:e[0][2],column:e[0][3]},t.prop="";e.length;){var i=e[0][0];if(":"===i||"space"===i||"comment"===i)break;t.prop+=e.shift()[1]}for(t.raws.between="";e.length;){if(":"===(r=e.shift())[0]){t.raws.between+=r[1];break}t.raws.between+=r[1]}"_"!==t.prop[0]&&"*"!==t.prop[0]||(t.raws.before+=t.prop[0],t.prop=t.prop.slice(1)),t.raws.between+=this.spacesAndCommentsFromStart(e),this.precheckMissedSemicolon(e);for(var s=e.length-1;s>0;s--){if("!important"===(r=e[s])[1].toLowerCase()){t.important=!0;var a=this.stringFrom(e,s);" !important"!==(a=this.spacesFromEnd(e)+a)&&(t.raws.important=a);break}if("important"===r[1].toLowerCase()){for(var u=e.slice(0),c="",l=s;l>0;l--){var h=u[l][0];if(0===c.trim().indexOf("!")&&"space"!==h)break;c=u.pop()[1]+c}0===c.trim().indexOf("!")&&(t.important=!0,t.raws.important=c,e=u)}if("space"!==r[0]&&"comment"!==r[0])break}this.raw(t,"value",e),-1!==t.value.indexOf(":")&&this.checkMissedSemicolon(e)},t.atrule=function(e){var t,r,n=new u.default;n.name=e[1].slice(1),""===n.name&&this.unnamedAtrule(n,e),this.init(n,e[2],e[3]);for(var o=!1,i=!1,s=[];!this.tokenizer.endOfFile();){if(";"===(e=this.tokenizer.nextToken())[0]){n.source.end={line:e[2],column:e[3]},this.semicolon=!0;break}if("{"===e[0]){i=!0;break}if("}"===e[0]){if(s.length>0){for(t=s[r=s.length-1];t&&"space"===t[0];)t=s[--r];t&&(n.source.end={line:t[4],column:t[5]})}this.end(e);break}if(s.push(e),this.tokenizer.endOfFile()){o=!0;break}}n.raws.between=this.spacesAndCommentsFromEnd(s),s.length?(n.raws.afterName=this.spacesAndCommentsFromStart(s),this.raw(n,"params",s),o&&(e=s[s.length-1],n.source.end={line:e[4],column:e[5]},this.spaces=n.raws.between,n.raws.between="")):(n.raws.afterName="",n.params=""),i&&(n.nodes=[],this.current=n)},t.end=function(e){this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.semicolon=!1,this.current.raws.after=(this.current.raws.after||"")+this.spaces,this.spaces="",this.current.parent?(this.current.source.end={line:e[2],column:e[3]},this.current=this.current.parent):this.unexpectedClose(e)},t.endFile=function(){this.current.parent&&this.unclosedBlock(),this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.current.raws.after=(this.current.raws.after||"")+this.spaces},t.freeSemicolon=function(e){if(this.spaces+=e[1],this.current.nodes){var t=this.current.nodes[this.current.nodes.length-1];t&&"rule"===t.type&&!t.raws.ownSemicolon&&(t.raws.ownSemicolon=this.spaces,this.spaces="")}},t.init=function(e,t,r){this.current.push(e),e.source={start:{line:t,column:r},input:this.input},e.raws.before=this.spaces,this.spaces="","comment"!==e.type&&(this.semicolon=!1)},t.raw=function(e,t,r){for(var n,o,i,s,a=r.length,u="",c=!0,l=/^([.|#])?([\w])+/i,h=0;h<a;h+=1)"comment"!==(o=(n=r[h])[0])||"rule"!==e.type?"comment"===o||"space"===o&&h===a-1?c=!1:u+=n[1]:(s=r[h-1],i=r[h+1],"space"!==s[0]&&"space"!==i[0]&&l.test(s[1])&&l.test(i[1])?u+=n[1]:c=!1);if(!c){var f=r.reduce(function(e,t){return e+t[1]},"");e.raws[t]={value:u,raw:f}}e[t]=u},t.spacesAndCommentsFromEnd=function(e){for(var t,r="";e.length&&("space"===(t=e[e.length-1][0])||"comment"===t);)r=e.pop()[1]+r;return r},t.spacesAndCommentsFromStart=function(e){for(var t,r="";e.length&&("space"===(t=e[0][0])||"comment"===t);)r+=e.shift()[1];return r},t.spacesFromEnd=function(e){for(var t="";e.length&&"space"===e[e.length-1][0];)t=e.pop()[1]+t;return t},t.stringFrom=function(e,t){for(var r="",n=t;n<e.length;n++)r+=e[n][1];return e.splice(t,e.length-t),r},t.colon=function(e){for(var t,r,n,o=0,i=0;i<e.length;i++){if("("===(r=(t=e[i])[0])&&(o+=1),")"===r&&(o-=1),0===o&&":"===r){if(n){if("word"===n[0]&&"progid"===n[1])continue;return i}this.doubleColon(t)}n=t}return!1},t.unclosedBracket=function(e){throw this.input.error("Unclosed bracket",e[2],e[3])},t.unknownWord=function(e){throw this.input.error("Unknown word",e[0][2],e[0][3])},t.unexpectedClose=function(e){throw this.input.error("Unexpected }",e[2],e[3])},t.unclosedBlock=function(){var e=this.current.source.start;throw this.input.error("Unclosed block",e.line,e.column)},t.doubleColon=function(e){throw this.input.error("Double colon",e[2],e[3])},t.unnamedAtrule=function(e,t){throw this.input.error("At-rule without name",t[2],t[3])},t.precheckMissedSemicolon=function(){},t.checkMissedSemicolon=function(e){var t=this.colon(e);if(!1!==t){for(var r,n=0,o=t-1;o>=0&&("space"===(r=e[o])[0]||2!==(n+=1));o--);throw this.input.error("Missed semicolon",r[2],r[3])}},e}();t.default=f,e.exports=t.default}),r=e(function(e,t){"use strict";var r;t.__esModule=!0,t.default=void 0;var i=function(e){var t,r;function i(t){var r;return(r=e.call(this,t)||this).type="root",r.nodes||(r.nodes=[]),r}r=e,(t=i).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var s=i.prototype;return s.removeChild=function(t,r){var n=this.index(t);return!r&&0===n&&this.nodes.length>1&&(this.nodes[1].raws.before=this.nodes[n].raws.before),e.prototype.removeChild.call(this,t)},s.normalize=function(t,r,n){var o=e.prototype.normalize.call(this,t);if(r)if("prepend"===n)this.nodes.length>1?r.raws.before=this.nodes[1].raws.before:delete r.raws.before;else if(this.first!==r){var i=o,s=Array.isArray(i),a=0;for(i=s?i:i[Symbol.iterator]();;){var u;if(s){if(a>=i.length)break;u=i[a++]}else{if((a=i.next()).done)break;u=a.value}u.raws.before=r.raws.before}}return o},s.toResult=function(e){return void 0===e&&(e={}),new(o({}))(new(n({})),this,e).stringify()},i}(((r=s({}))&&r.__esModule?r:{default:r}).default);t.default=i,e.exports=t.default}),n=e(function(e,t){"use strict";t.__esModule=!0,t.default=void 0;var r,n=(r=o({}))&&r.__esModule?r:{default:r},i=function(){function e(e){void 0===e&&(e=[]),this.version="7.0.5",this.plugins=this.normalize(e)}var t=e.prototype;return t.use=function(e){return this.plugins=this.plugins.concat(this.normalize([e])),this},t.process=function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(e,t){return void 0===t&&(t={}),0===this.plugins.length&&(t.parser,t.stringifier),new n.default(this,e,t)}),t.normalize=function(e){var t=[],r=e,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++]}else{if((o=r.next()).done)break;i=o.value}var s=i;if(s.postcss&&(s=s.postcss),"object"==typeof s&&Array.isArray(s.plugins))t=t.concat(s.plugins);else if("function"==typeof s)t.push(s);else if("object"!=typeof s||!s.parse&&!s.stringify)throw new Error(s+" is not a PostCSS plugin")}return t},e}();t.default=i,e.exports=t.default}),o=e(function(e,t){"use strict";t.__esModule=!0,t.default=void 0;var r=s(Dt),n=s(_),o=(s(Zt),s(Gt)),i=s(u({}));function s(e){return e&&e.__esModule?e:{default:e}}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e){return"object"==typeof e&&"function"==typeof e.then}var l=function(){function e(t,r,n){var s;if(this.stringified=!1,this.processed=!1,"object"==typeof r&&null!==r&&"root"===r.type)s=r;else if(r instanceof e||r instanceof o.default)s=r.root,r.map&&(void 0===n.map&&(n.map={}),n.map.inline||(n.map.inline=!1),n.map.prev=r.map);else{var a=i.default;n.syntax&&(a=n.syntax.parse),n.parser&&(a=n.parser),a.parse&&(a=a.parse);try{s=a(r,n)}catch(u){this.error=u}}this.result=new o.default(t,s,n)}var t,s,u=e.prototype;return u.warnings=function(){return this.sync().warnings()},u.toString=function(){return this.css},u.then=function(e,t){return this.async().then(e,t)},u.catch=function(e){return this.async().catch(e)},u.finally=function(e){return this.async().then(e,e)},u.handleError=function(e,t){try{this.error=e,"CssSyntaxError"!==e.name||e.plugin?t.postcssVersion:(e.plugin=t.postcssPlugin,e.setMessage())}catch(r){console&&console.error&&console.error(r)}},u.asyncTick=function(e,t){var r=this;if(this.plugin>=this.processor.plugins.length)return this.processed=!0,e();try{var n=this.processor.plugins[this.plugin],o=this.run(n);this.plugin+=1,c(o)?o.then(function(){r.asyncTick(e,t)}).catch(function(e){r.handleError(e,n),r.processed=!0,t(e)}):this.asyncTick(e,t)}catch(i){this.processed=!0,t(i)}},u.async=function(){var e=this;return this.processed?new Promise(function(t,r){e.error?r(e.error):t(e.stringify())}):this.processing?this.processing:(this.processing=new Promise(function(t,r){if(e.error)return r(e.error);e.plugin=0,e.asyncTick(t,r)}).then(function(){return e.processed=!0,e.stringify()}),this.processing)},u.sync=function(){if(this.processed)return this.result;if(this.processed=!0,this.processing)throw new Error("Use process(css).then(cb) to work with async plugins");if(this.error)throw this.error;var e=this.result.processor.plugins,t=Array.isArray(e),r=0;for(e=t?e:e[Symbol.iterator]();;){var n;if(t){if(r>=e.length)break;n=e[r++]}else{if((r=e.next()).done)break;n=r.value}var o=n;if(c(this.run(o)))throw new Error("Use process(css).then(cb) to work with async plugins")}return this.result},u.run=function(e){this.result.lastPlugin=e;try{return e(this.result.root,this.result)}catch(t){throw this.handleError(t,e),t}},u.stringify=function(){if(this.stringified)return this.result;this.stringified=!0,this.sync();var e=this.result.opts,t=n.default;e.syntax&&(t=e.syntax.stringify),e.stringifier&&(t=e.stringifier),t.stringify&&(t=t.stringify);var o=new r.default(t,this.result.root,this.result.opts).generate();return this.result.css=o[0],this.result.map=o[1],this.result},t=e,(s=[{key:"processor",get:function(){return this.result.processor}},{key:"opts",get:function(){return this.result.opts}},{key:"css",get:function(){return this.stringify().css}},{key:"content",get:function(){return this.stringify().content}},{key:"map",get:function(){return this.stringify().map}},{key:"root",get:function(){return this.sync().root}},{key:"messages",get:function(){return this.sync().messages}}])&&a(t.prototype,s),e}();t.default=l,e.exports=t.default}),i=e(function(e,t){"use strict";var r;t.__esModule=!0,t.default=void 0;var n=function(e){var t,r;function n(t){var r;return(r=e.call(this,t)||this).type="atrule",r}r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r;var o=n.prototype;return o.append=function(){var t;this.nodes||(this.nodes=[]);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(t=e.prototype.append).call.apply(t,[this].concat(n))},o.prepend=function(){var t;this.nodes||(this.nodes=[]);for(var r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];return(t=e.prototype.prepend).call.apply(t,[this].concat(n))},n}(((r=s({}))&&r.__esModule?r:{default:r}).default);t.default=n,e.exports=t.default}),s=e(function(e,t){"use strict";t.__esModule=!0,t.default=void 0;var r=o(T),n=o(R);function o(e){return e&&e.__esModule?e:{default:e}}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var c=function(e){var t,o;function c(){return e.apply(this,arguments)||this}o=e,(t=c).prototype=Object.create(o.prototype),t.prototype.constructor=t,t.__proto__=o;var l,h,f=c.prototype;return f.push=function(e){return e.parent=this,this.nodes.push(e),this},f.each=function(e){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach+=1;var t=this.lastEach;if(this.indexes[t]=0,this.nodes){for(var r,n;this.indexes[t]<this.nodes.length&&(r=this.indexes[t],!1!==(n=e(this.nodes[r],r)));)this.indexes[t]+=1;return delete this.indexes[t],n}},f.walk=function(e){return this.each(function(t,r){var n;try{n=e(t,r)}catch(i){if(i.postcssNode=t,i.stack&&t.source&&/\n\s{4}at /.test(i.stack)){var o=t.source;i.stack=i.stack.replace(/\n\s{4}at /,"$&"+o.input.from+":"+o.start.line+":"+o.start.column+"$&")}throw i}return!1!==n&&t.walk&&(n=t.walk(e)),n})},f.walkDecls=function(e,t){return t?e instanceof RegExp?this.walk(function(r,n){if("decl"===r.type&&e.test(r.prop))return t(r,n)}):this.walk(function(r,n){if("decl"===r.type&&r.prop===e)return t(r,n)}):(t=e,this.walk(function(e,r){if("decl"===e.type)return t(e,r)}))},f.walkRules=function(e,t){return t?e instanceof RegExp?this.walk(function(r,n){if("rule"===r.type&&e.test(r.selector))return t(r,n)}):this.walk(function(r,n){if("rule"===r.type&&r.selector===e)return t(r,n)}):(t=e,this.walk(function(e,r){if("rule"===e.type)return t(e,r)}))},f.walkAtRules=function(e,t){return t?e instanceof RegExp?this.walk(function(r,n){if("atrule"===r.type&&e.test(r.name))return t(r,n)}):this.walk(function(r,n){if("atrule"===r.type&&r.name===e)return t(r,n)}):(t=e,this.walk(function(e,r){if("atrule"===e.type)return t(e,r)}))},f.walkComments=function(e){return this.walk(function(t,r){if("comment"===t.type)return e(t,r)})},f.append=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0;n<t.length;n++){var o=t[n],i=this.normalize(o,this.last),s=Array.isArray(i),a=0;for(i=s?i:i[Symbol.iterator]();;){var u;if(s){if(a>=i.length)break;u=i[a++]}else{if((a=i.next()).done)break;u=a.value}var c=u;this.nodes.push(c)}}return this},f.prepend=function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];var n=t=t.reverse(),o=Array.isArray(n),i=0;for(n=o?n:n[Symbol.iterator]();;){var s;if(o){if(i>=n.length)break;s=n[i++]}else{if((i=n.next()).done)break;s=i.value}var a=s,u=this.normalize(a,this.first,"prepend").reverse(),c=u,l=Array.isArray(c),h=0;for(c=l?c:c[Symbol.iterator]();;){var f;if(l){if(h>=c.length)break;f=c[h++]}else{if((h=c.next()).done)break;f=h.value}var p=f;this.nodes.unshift(p)}for(var d in this.indexes)this.indexes[d]=this.indexes[d]+u.length}return this},f.cleanRaws=function(t){if(e.prototype.cleanRaws.call(this,t),this.nodes){var r=this.nodes,n=Array.isArray(r),o=0;for(r=n?r:r[Symbol.iterator]();;){var i;if(n){if(o>=r.length)break;i=r[o++]}else{if((o=r.next()).done)break;i=o.value}i.cleanRaws(t)}}},f.insertBefore=function(e,t){var r,n=0===(e=this.index(e))&&"prepend",o=this.normalize(t,this.nodes[e],n).reverse(),i=o,s=Array.isArray(i),a=0;for(i=s?i:i[Symbol.iterator]();;){var u;if(s){if(a>=i.length)break;u=i[a++]}else{if((a=i.next()).done)break;u=a.value}var c=u;this.nodes.splice(e,0,c)}for(var l in this.indexes)e<=(r=this.indexes[l])&&(this.indexes[l]=r+o.length);return this},f.insertAfter=function(e,t){e=this.index(e);var r,n=this.normalize(t,this.nodes[e]).reverse(),o=n,i=Array.isArray(o),s=0;for(o=i?o:o[Symbol.iterator]();;){var a;if(i){if(s>=o.length)break;a=o[s++]}else{if((s=o.next()).done)break;a=s.value}var u=a;this.nodes.splice(e+1,0,u)}for(var c in this.indexes)e<(r=this.indexes[c])&&(this.indexes[c]=r+n.length);return this},f.removeChild=function(e){var t;for(var r in e=this.index(e),this.nodes[e].parent=void 0,this.nodes.splice(e,1),this.indexes)(t=this.indexes[r])>=e&&(this.indexes[r]=t-1);return this},f.removeAll=function(){var e=this.nodes,t=Array.isArray(e),r=0;for(e=t?e:e[Symbol.iterator]();;){var n;if(t){if(r>=e.length)break;n=e[r++]}else{if((r=e.next()).done)break;n=r.value}n.parent=void 0}return this.nodes=[],this},f.replaceValues=function(e,t,r){return r||(r=t,t={}),this.walkDecls(function(n){t.props&&-1===t.props.indexOf(n.prop)||t.fast&&-1===n.value.indexOf(t.fast)||(n.value=n.value.replace(e,r))}),this},f.every=function(e){return this.nodes.every(e)},f.some=function(e){return this.nodes.some(e)},f.index=function(e){return"number"==typeof e?e:this.nodes.indexOf(e)},f.normalize=function(e,t){var o=this;if("string"==typeof e)e=function e(t){return t.map(function(t){return t.nodes&&(t.nodes=e(t.nodes)),delete t.source,t})}(u({})(e).nodes);else if(Array.isArray(e)){var s=e=e.slice(0),c=Array.isArray(s),l=0;for(s=c?s:s[Symbol.iterator]();;){var h;if(c){if(l>=s.length)break;h=s[l++]}else{if((l=s.next()).done)break;h=l.value}var f=h;f.parent&&f.parent.removeChild(f,"ignore")}}else if("root"===e.type){var p=e=e.nodes.slice(0),d=Array.isArray(p),g=0;for(p=d?p:p[Symbol.iterator]();;){var m;if(d){if(g>=p.length)break;m=p[g++]}else{if((g=p.next()).done)break;m=g.value}var v=m;v.parent&&v.parent.removeChild(v,"ignore")}}else if(e.type)e=[e];else if(e.prop){if(void 0===e.value)throw new Error("Value field is missed in node creation");"string"!=typeof e.value&&(e.value=String(e.value)),e=[new r.default(e)]}else if(e.selector)e=[new(a({}))(e)];else if(e.name)e=[new(i({}))(e)];else{if(!e.text)throw new Error("Unknown node type in node creation");e=[new n.default(e)]}return e.map(function(e){return e.parent&&e.parent.removeChild(e),void 0===e.raws.before&&t&&void 0!==t.raws.before&&(e.raws.before=t.raws.before.replace(/[^\s]/g,"")),e.parent=o,e})},l=c,(h=[{key:"first",get:function(){if(this.nodes)return this.nodes[0]}},{key:"last",get:function(){if(this.nodes)return this.nodes[this.nodes.length-1]}}])&&s(l.prototype,h),c}(o(k).default);t.default=c,e.exports=t.default}),a=e(function(e,t){"use strict";t.__esModule=!0,t.default=void 0;var r=o(s({})),n=o(Ft);function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=function(e){var t,r,o,s;function a(t){var r;return(r=e.call(this,t)||this).type="rule",r.nodes||(r.nodes=[]),r}return r=e,(t=a).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,o=a,(s=[{key:"selectors",get:function(){return n.default.comma(this.selector)},set:function(e){var t=this.selector?this.selector.match(/,\s*/):null,r=t?t[0]:","+this.raw("between","beforeOpen");this.selector=e.join(r)}}])&&i(o.prototype,s),a}(r.default);t.default=a,e.exports=t.default}),u=e(function(e,r){"use strict";r.__esModule=!0,r.default=void 0;var n=i(t({})),o=i(Pt);function i(e){return e&&e.__esModule?e:{default:e}}r.default=function(e,t){var r=new o.default(e,t),i=new n.default(r);try{i.parse()}catch(s){throw s}return i.root},e.exports=r.default}),c={};c=c=function(e){for(var t=0;t<e.length;)if(9==e[t]||10==e[t]||13==e[t]||32<=e[t]&&e[t]<=126)t+=1;else if(194<=e[t]&&e[t]<=223&&128<=e[t+1]&&e[t+1]<=191)t+=2;else if(224==e[t]&&160<=e[t+1]&&e[t+1]<=191&&128<=e[t+2]&&e[t+2]<=191||(225<=e[t]&&e[t]<=236||238==e[t]||239==e[t])&&128<=e[t+1]&&e[t+1]<=191&&128<=e[t+2]&&e[t+2]<=191||237==e[t]&&128<=e[t+1]&&e[t+1]<=159&&128<=e[t+2]&&e[t+2]<=191)t+=3;else{if(!(240==e[t]&&144<=e[t+1]&&e[t+1]<=191&&128<=e[t+2]&&e[t+2]<=191&&128<=e[t+3]&&e[t+3]<=191||241<=e[t]&&e[t]<=243&&128<=e[t+1]&&e[t+1]<=191&&128<=e[t+2]&&e[t+2]<=191&&128<=e[t+3]&&e[t+3]<=191||244==e[t]&&128<=e[t+1]&&e[t+1]<=143&&128<=e[t+2]&&e[t+2]<=191&&128<=e[t+3]&&e[t+3]<=191))return!1;t+=4}return!0};var l={},h={__esModule:!0,default:void 0},f=g(l),p=g(l),d=g(l);function g(e){return e&&e.__esModule?e:{default:e}}var m=function(){function e(t,r,n,o,i,s){this.name="CssSyntaxError",this.reason=t,i&&(this.file=i),o&&(this.source=o),s&&(this.plugin=s),void 0!==r&&void 0!==n&&(this.line=r,this.column=n),this.setMessage(),Error.captureStackTrace&&Error.captureStackTrace(this,e)}var t=e.prototype;return t.setMessage=function(){this.message=this.plugin?this.plugin+": ":"",this.message+=this.file?this.file:"<css input>",void 0!==this.line&&(this.message+=":"+this.line+":"+this.column),this.message+=": "+this.reason},t.showSourceCode=function(e){var t=this;if(!this.source)return"";var r=this.source;d.default&&(void 0===e&&(e=f.default.stdout),e&&(r=(0,d.default)(r)));var n=r.split(/\r?\n/),o=Math.max(this.line-3,0),i=Math.min(this.line+2,n.length),s=String(i).length;function a(t){return e&&p.default.red?p.default.red.bold(t):t}function u(t){return e&&p.default.gray?p.default.gray(t):t}return n.slice(o,i).map(function(e,r){var n=o+1+r,i=" "+(" "+n).slice(-s)+" | ";if(n===t.line){var c=u(i.replace(/\d/g," "))+e.slice(0,t.column-1).replace(/[^\t]/g," ");return a(">")+u(i)+e+"\n "+c+a("^")}return" "+u(i)+e}).join("\n")},t.toString=function(){var e=this.showSourceCode();return e&&(e="\n\n"+e+"\n"),this.name+": "+this.message+e},e}();h.default=m,h=h.default;var v={__esModule:!0,default:void 0},y={colon:": ",indent:"    ",beforeDecl:"\n",beforeRule:"\n",beforeOpen:" ",beforeClose:"\n",beforeComment:"\n",after:"\n",emptyBody:"",commentLeft:" ",commentRight:" "},w=function(){function e(e){this.builder=e}var t=e.prototype;return t.stringify=function(e,t){this[e.type](e,t)},t.root=function(e){this.body(e),e.raws.after&&this.builder(e.raws.after)},t.comment=function(e){var t=this.raw(e,"left","commentLeft"),r=this.raw(e,"right","commentRight");this.builder("/*"+t+e.text+r+"*/",e)},t.decl=function(e,t){var r=this.raw(e,"between","colon"),n=e.prop+r+this.rawValue(e,"value");e.important&&(n+=e.raws.important||" !important"),t&&(n+=";"),this.builder(n,e)},t.rule=function(e){this.block(e,this.rawValue(e,"selector")),e.raws.ownSemicolon&&this.builder(e.raws.ownSemicolon,e,"end")},t.atrule=function(e,t){var r="@"+e.name,n=e.params?this.rawValue(e,"params"):"";if(void 0!==e.raws.afterName?r+=e.raws.afterName:n&&(r+=" "),e.nodes)this.block(e,r+n);else{var o=(e.raws.between||"")+(t?";":"");this.builder(r+n+o,e)}},t.body=function(e){for(var t=e.nodes.length-1;t>0&&"comment"===e.nodes[t].type;)t-=1;for(var r=this.raw(e,"semicolon"),n=0;n<e.nodes.length;n++){var o=e.nodes[n],i=this.raw(o,"before");i&&this.builder(i),this.stringify(o,t!==n||r)}},t.block=function(e,t){var r,n=this.raw(e,"between","beforeOpen");this.builder(t+n+"{",e,"start"),e.nodes&&e.nodes.length?(this.body(e),r=this.raw(e,"after")):r=this.raw(e,"after","emptyBody"),r&&this.builder(r),this.builder("}",e,"end")},t.raw=function(e,t,r){var n;if(r||(r=t),t&&void 0!==(n=e.raws[t]))return n;var o=e.parent;if("before"===r&&(!o||"root"===o.type&&o.first===e))return"";if(!o)return y[r];var i=e.root();if(i.rawCache||(i.rawCache={}),void 0!==i.rawCache[r])return i.rawCache[r];if("before"===r||"after"===r)return this.beforeAfter(e,r);var s,a="raw"+((s=r)[0].toUpperCase()+s.slice(1));return this[a]?n=this[a](i,e):i.walk(function(e){if(void 0!==(n=e.raws[t]))return!1}),void 0===n&&(n=y[r]),i.rawCache[r]=n,n},t.rawSemicolon=function(e){var t;return e.walk(function(e){if(e.nodes&&e.nodes.length&&"decl"===e.last.type&&void 0!==(t=e.raws.semicolon))return!1}),t},t.rawEmptyBody=function(e){var t;return e.walk(function(e){if(e.nodes&&0===e.nodes.length&&void 0!==(t=e.raws.after))return!1}),t},t.rawIndent=function(e){return e.raws.indent?e.raws.indent:(e.walk(function(r){var n=r.parent;if(n&&n!==e&&n.parent&&n.parent===e&&void 0!==r.raws.before){var o=r.raws.before.split("\n");return t=(t=o[o.length-1]).replace(/[^\s]/g,""),!1}}),t);var t},t.rawBeforeComment=function(e,t){var r;return e.walkComments(function(e){if(void 0!==e.raws.before)return-1!==(r=e.raws.before).indexOf("\n")&&(r=r.replace(/[^\n]+$/,"")),!1}),void 0===r?r=this.raw(t,null,"beforeDecl"):r&&(r=r.replace(/[^\s]/g,"")),r},t.rawBeforeDecl=function(e,t){var r;return e.walkDecls(function(e){if(void 0!==e.raws.before)return-1!==(r=e.raws.before).indexOf("\n")&&(r=r.replace(/[^\n]+$/,"")),!1}),void 0===r?r=this.raw(t,null,"beforeRule"):r&&(r=r.replace(/[^\s]/g,"")),r},t.rawBeforeRule=function(e){var t;return e.walk(function(r){if(r.nodes&&(r.parent!==e||e.first!==r)&&void 0!==r.raws.before)return-1!==(t=r.raws.before).indexOf("\n")&&(t=t.replace(/[^\n]+$/,"")),!1}),t&&(t=t.replace(/[^\s]/g,"")),t},t.rawBeforeClose=function(e){var t;return e.walk(function(e){if(e.nodes&&e.nodes.length>0&&void 0!==e.raws.after)return-1!==(t=e.raws.after).indexOf("\n")&&(t=t.replace(/[^\n]+$/,"")),!1}),t&&(t=t.replace(/[^\s]/g,"")),t},t.rawBeforeOpen=function(e){var t;return e.walk(function(e){if("decl"!==e.type&&void 0!==(t=e.raws.between))return!1}),t},t.rawColon=function(e){var t;return e.walkDecls(function(e){if(void 0!==e.raws.between)return t=e.raws.between.replace(/[^\s:]/g,""),!1}),t},t.beforeAfter=function(e,t){var r;r="decl"===e.type?this.raw(e,null,"beforeDecl"):"comment"===e.type?this.raw(e,null,"beforeComment"):"before"===t?this.raw(e,null,"beforeRule"):this.raw(e,null,"beforeClose");for(var n=e.parent,o=0;n&&"root"!==n.type;)o+=1,n=n.parent;if(-1!==r.indexOf("\n")){var i=this.raw(e,null,"indent");if(i.length)for(var s=0;s<o;s++)r+=i}return r},t.rawValue=function(e,t){var r=e[t],n=e.raws[t];return n&&n.value===r?n.raw:r},e}();v.default=w,v=v.default;var b,_={__esModule:!0,default:void 0},A=(b=v)&&b.__esModule?b:{default:b};_.default=function(e,t){new A.default(t).stringify(e)},_=_.default;var k={__esModule:!0,default:void 0},C=E(h),S=E(v),x=E(_);function E(e){return e&&e.__esModule?e:{default:e}}var M=function(){function e(e){for(var t in void 0===e&&(e={}),this.raws={},e)this[t]=e[t]}var t=e.prototype;return t.error=function(e,t){if(void 0===t&&(t={}),this.source){var r=this.positionBy(t);return this.source.input.error(e,r.line,r.column,t)}return new C.default(e)},t.warn=function(e,t,r){var n={node:this};for(var o in r)n[o]=r[o];return e.warn(t,n)},t.remove=function(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this},t.toString=function(e){void 0===e&&(e=x.default),e.stringify&&(e=e.stringify);var t="";return e(this,function(e){t+=e}),t},t.clone=function(e){void 0===e&&(e={});var t=function e(t,r){var n=new t.constructor;for(var o in t)if(t.hasOwnProperty(o)){var i=t[o],s=typeof i;"parent"===o&&"object"===s?r&&(n[o]=r):"source"===o?n[o]=i:i instanceof Array?n[o]=i.map(function(t){return e(t,n)}):("object"===s&&null!==i&&(i=e(i)),n[o]=i)}return n}(this);for(var r in e)t[r]=e[r];return t},t.cloneBefore=function(e){void 0===e&&(e={});var t=this.clone(e);return this.parent.insertBefore(this,t),t},t.cloneAfter=function(e){void 0===e&&(e={});var t=this.clone(e);return this.parent.insertAfter(this,t),t},t.replaceWith=function(){if(this.parent){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];for(var n=0;n<t.length;n++){var o=t[n];this.parent.insertBefore(this,o)}this.remove()}return this},t.next=function(){if(this.parent){var e=this.parent.index(this);return this.parent.nodes[e+1]}},t.prev=function(){if(this.parent){var e=this.parent.index(this);return this.parent.nodes[e-1]}},t.before=function(e){return this.parent.insertBefore(this,e),this},t.after=function(e){return this.parent.insertAfter(this,e),this},t.toJSON=function(){var e={};for(var t in this)if(this.hasOwnProperty(t)&&"parent"!==t){var r=this[t];r instanceof Array?e[t]=r.map(function(e){return"object"==typeof e&&e.toJSON?e.toJSON():e}):"object"==typeof r&&r.toJSON?e[t]=r.toJSON():e[t]=r}return e},t.raw=function(e,t){return(new S.default).raw(this,e,t)},t.root=function(){for(var e=this;e.parent;)e=e.parent;return e},t.cleanRaws=function(e){delete this.raws.before,delete this.raws.after,e||delete this.raws.between},t.positionInside=function(e){for(var t=this.toString(),r=this.source.start.column,n=this.source.start.line,o=0;o<e;o++)"\n"===t[o]?(r=1,n+=1):r+=1;return{line:n,column:r}},t.positionBy=function(e){var t=this.source.start;if(e.index)t=this.positionInside(e.index);else if(e.word){var r=this.toString().indexOf(e.word);-1!==r&&(t=this.positionInside(r))}return t},e}();k.default=M,k=k.default;var O,R={};R.__esModule=!0,R.default=void 0;var P=function(e){var t,r;function n(t){var r;return(r=e.call(this,t)||this).type="comment",r}return r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,n}(((O=k)&&O.__esModule?O:{default:O}).default);R.default=P,R=R.default;var L,T={};T.__esModule=!0,T.default=void 0;var I=function(e){var t,r;function n(t){var r;return(r=e.call(this,t)||this).type="decl",r}return r=e,(t=n).prototype=Object.create(r.prototype),t.prototype.constructor=t,t.__proto__=r,n}(((L=k)&&L.__esModule?L:{default:L}).default);T.default=I,T=T.default;var z,U,j,B=z={};function F(){throw new Error("setTimeout has not been defined")}function Q(){throw new Error("clearTimeout has not been defined")}function N(e){if(U===setTimeout)return setTimeout(e,0);if((U===F||!U)&&setTimeout)return U=setTimeout,setTimeout(e,0);try{return U(e,0)}catch(t){try{return U.call(null,e,0)}catch(t){return U.call(this,e,0)}}}!function(){try{U="function"==typeof setTimeout?setTimeout:F}catch(e){U=F}try{j="function"==typeof clearTimeout?clearTimeout:Q}catch(e){j=Q}}();var D,q=[],$=!1,H=-1;function G(){$&&D&&($=!1,D.length?q=D.concat(q):H=-1,q.length&&V())}function V(){if(!$){var e=N(G);$=!0;for(var t=q.length;t;){for(D=q,q=[];++H<t;)D&&D[H].run();H=-1,t=q.length}D=null,$=!1,function(e){if(j===clearTimeout)return clearTimeout(e);if((j===Q||!j)&&clearTimeout)return j=clearTimeout,clearTimeout(e);try{j(e)}catch(t){try{return j.call(null,e)}catch(t){return j.call(this,e)}}}(e)}}function W(e,t){this.fun=e,this.array=t}function J(){}B.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];q.push(new W(e,t)),1!==q.length||$||N(V)},W.prototype.run=function(){this.fun.apply(null,this.array)},B.title="browser",B.browser=!0,B.env={},B.argv=[],B.version="",B.versions={},B.on=J,B.addListener=J,B.once=J,B.off=J,B.removeListener=J,B.removeAllListeners=J,B.emit=J,B.prependListener=J,B.prependOnceListener=J,B.listeners=function(e){return[]},B.binding=function(e){throw new Error("process.binding is not supported")},B.cwd=function(){return"/"},B.chdir=function(e){throw new Error("process.chdir is not supported")},B.umask=function(){return 0};var Z={};(function(e){function t(e,t){for(var r=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),r++):r&&(e.splice(n,1),r--)}if(t)for(;r--;r)e.unshift("..");return e}function r(e,t){if(e.filter)return e.filter(t);for(var r=[],n=0;n<e.length;n++)t(e[n],n,e)&&r.push(e[n]);return r}Z.resolve=function(){for(var n="",o=!1,i=arguments.length-1;i>=-1&&!o;i--){var s=i>=0?arguments[i]:e.cwd();if("string"!=typeof s)throw new TypeError("Arguments to path.resolve must be strings");s&&(n=s+"/"+n,o="/"===s.charAt(0))}return(o?"/":"")+(n=t(r(n.split("/"),function(e){return!!e}),!o).join("/"))||"."},Z.normalize=function(e){var o=Z.isAbsolute(e),i="/"===n(e,-1);return(e=t(r(e.split("/"),function(e){return!!e}),!o).join("/"))||o||(e="."),e&&i&&(e+="/"),(o?"/":"")+e},Z.isAbsolute=function(e){return"/"===e.charAt(0)},Z.join=function(){var e=Array.prototype.slice.call(arguments,0);return Z.normalize(r(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},Z.relative=function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;r>=0&&""===e[r];r--);return t>r?[]:e.slice(t,r-t+1)}e=Z.resolve(e).substr(1),t=Z.resolve(t).substr(1);for(var n=r(e.split("/")),o=r(t.split("/")),i=Math.min(n.length,o.length),s=i,a=0;a<i;a++)if(n[a]!==o[a]){s=a;break}var u=[];for(a=s;a<n.length;a++)u.push("..");return(u=u.concat(o.slice(s))).join("/")},Z.sep="/",Z.delimiter=":",Z.dirname=function(e){if("string"!=typeof e&&(e+=""),0===e.length)return".";for(var t=e.charCodeAt(0),r=47===t,n=-1,o=!0,i=e.length-1;i>=1;--i)if(47===(t=e.charCodeAt(i))){if(!o){n=i;break}}else o=!1;return-1===n?r?"/":".":r&&1===n?"/":e.slice(0,n)},Z.basename=function(e,t){var r=function(e){"string"!=typeof e&&(e+="");var t,r=0,n=-1,o=!0;for(t=e.length-1;t>=0;--t)if(47===e.charCodeAt(t)){if(!o){r=t+1;break}}else-1===n&&(o=!1,n=t+1);return-1===n?"":e.slice(r,n)}(e);return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r},Z.extname=function(e){"string"!=typeof e&&(e+="");for(var t=-1,r=0,n=-1,o=!0,i=0,s=e.length-1;s>=0;--s){var a=e.charCodeAt(s);if(47!==a)-1===n&&(o=!1,n=s+1),46===a?-1===t?t=s:1!==i&&(i=1):-1!==t&&(i=-1);else if(!o){r=s+1;break}}return-1===t||-1===n||0===i||1===i&&t===n-1&&t===r+1?"":e.slice(t,n)};var n="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)}}).call(this,z);for(var Y={toByteArray:function(e){for(var t,r=oe(e),n=r[0],o=r[1],i=new ee(function(e,t,r){return 3*(t+r)/4-r}(0,n,o)),s=0,a=o>0?n-4:n,u=0;u<a;u+=4)t=K[e.charCodeAt(u)]<<18|K[e.charCodeAt(u+1)]<<12|K[e.charCodeAt(u+2)]<<6|K[e.charCodeAt(u+3)],i[s++]=t>>16&255,i[s++]=t>>8&255,i[s++]=255&t;return 2===o&&(t=K[e.charCodeAt(u)]<<2|K[e.charCodeAt(u+1)]>>4,i[s++]=255&t),1===o&&(t=K[e.charCodeAt(u)]<<10|K[e.charCodeAt(u+1)]<<4|K[e.charCodeAt(u+2)]>>2,i[s++]=t>>8&255,i[s++]=255&t),i},fromByteArray:function(e){for(var t,r=e.length,n=r%3,o=[],i=0,s=r-n;i<s;i+=16383)o.push(ie(e,i,i+16383>s?s:i+16383));return 1===n?(t=e[r-1],o.push(X[t>>2]+X[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],o.push(X[t>>10]+X[t>>4&63]+X[t<<2&63]+"=")),o.join("")}},X=[],K=[],ee="undefined"!=typeof Uint8Array?Uint8Array:Array,te="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",re=0,ne=te.length;re<ne;++re)X[re]=te[re],K[te.charCodeAt(re)]=re;function oe(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function ie(e,t,r){for(var n,o,i=[],s=t;s<r;s+=3)n=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(X[(o=n)>>18&63]+X[o>>12&63]+X[o>>6&63]+X[63&o]);return i.join("")}K["-".charCodeAt(0)]=62,K["_".charCodeAt(0)]=63;var se={read:function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,c=u>>1,l=-7,h=r?o-1:0,f=r?-1:1,p=e[t+h];for(h+=f,i=p&(1<<-l)-1,p>>=-l,l+=a;l>0;i=256*i+e[t+h],h+=f,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=f,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),i-=c}return(p?-1:1)*s*Math.pow(2,i-n)},write:function(e,t,r,n,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,h=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:i-1,d=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(s++,u/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*u-1)*Math.pow(2,o),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,o),s=0));o>=8;e[r+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[r+p]=255&s,p+=d,s/=256,c-=8);e[r+p-d]|=128*g}},ae={};ae.Buffer=le,ae.INSPECT_MAX_BYTES=50;var ue=2147483647;function ce(e){if(e>ue)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return t.__proto__=le.prototype,t}function le(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return pe(e)}return he(e,t,r)}function he(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!le.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var r=0|me(e,t),n=ce(r),o=n.write(e,t);return o!==r&&(n=n.slice(0,o)),n}(e,t);if(ArrayBuffer.isView(e))return de(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(De(e,ArrayBuffer)||e&&De(e.buffer,ArrayBuffer))return function(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');var n;return(n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r)).__proto__=le.prototype,n}(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return le.from(n,t,r);var o=function(e){if(le.isBuffer(e)){var t=0|ge(e.length),r=ce(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}return void 0!==e.length?"number"!=typeof e.length||qe(e.length)?ce(0):de(e):"Buffer"===e.type&&Array.isArray(e.data)?de(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return le.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function fe(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function pe(e){return fe(e),ce(e<0?0:0|ge(e))}function de(e){for(var t=e.length<0?0:0|ge(e.length),r=ce(t),n=0;n<t;n+=1)r[n]=255&e[n];return r}function ge(e){if(e>=ue)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+ue.toString(16)+" bytes");return 0|e}function me(e,t){if(le.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||De(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);var r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return Fe(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Qe(e).length;default:if(o)return n?-1:Fe(e).length;t=(""+t).toLowerCase(),o=!0}}function ve(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function ye(e,t,r,n,o){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),qe(r=+r)&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return-1;r=e.length-1}else if(r<0){if(!o)return-1;r=0}if("string"==typeof t&&(t=le.from(t,n)),le.isBuffer(t))return 0===t.length?-1:we(e,t,r,n,o);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):we(e,[t],r,n,o);throw new TypeError("val must be string, number or Buffer")}function we(e,t,r,n,o){var i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=r;i<a;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){for(var h=!0,f=0;f<u;f++)if(c(e,i+f)!==c(t,f)){h=!1;break}if(h)return i}return-1}function be(e,t,r,n){r=Number(r)||0;var o=e.length-r;n?(n=Number(n))>o&&(n=o):n=o;var i=t.length;n>i/2&&(n=i/2);for(var s=0;s<n;++s){var a=parseInt(t.substr(2*s,2),16);if(qe(a))return s;e[r+s]=a}return s}function _e(e,t,r,n){return Ne(Fe(t,e.length-r),e,r,n)}function Ae(e,t,r,n){return Ne(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function ke(e,t,r,n){return Ae(e,t,r,n)}function Ce(e,t,r,n){return Ne(Qe(t),e,r,n)}function Se(e,t,r,n){return Ne(function(e,t){for(var r,n,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=(r=e.charCodeAt(s))>>8,o=r%256,i.push(o),i.push(n);return i}(t,e.length-r),e,r,n)}function xe(e,t,r){return 0===t&&r===e.length?Y.fromByteArray(e):Y.fromByteArray(e.slice(t,r))}function Ee(e,t,r){r=Math.min(e.length,r);for(var n=[],o=t;o<r;){var i,s,a,u,c=e[o],l=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=r)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,n.push(l>>>10&1023|55296),l=56320|1023&l),n.push(l),o+=h}return function(e){var t=e.length;if(t<=Me)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=Me));return r}(n)}le.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()}catch(t){return!1}}(),le.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(le.prototype,"parent",{enumerable:!0,get:function(){if(le.isBuffer(this))return this.buffer}}),Object.defineProperty(le.prototype,"offset",{enumerable:!0,get:function(){if(le.isBuffer(this))return this.byteOffset}}),"undefined"!=typeof Symbol&&null!=Symbol.species&&le[Symbol.species]===le&&Object.defineProperty(le,Symbol.species,{value:null,configurable:!0,enumerable:!1,writable:!1}),le.poolSize=8192,le.from=function(e,t,r){return he(e,t,r)},le.prototype.__proto__=Uint8Array.prototype,le.__proto__=Uint8Array,le.alloc=function(e,t,r){return function(e,t,r){return fe(e),e<=0?ce(e):void 0!==t?"string"==typeof r?ce(e).fill(t,r):ce(e).fill(t):ce(e)}(e,t,r)},le.allocUnsafe=function(e){return pe(e)},le.allocUnsafeSlow=function(e){return pe(e)},le.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==le.prototype},le.compare=function(e,t){if(De(e,Uint8Array)&&(e=le.from(e,e.offset,e.byteLength)),De(t,Uint8Array)&&(t=le.from(t,t.offset,t.byteLength)),!le.isBuffer(e)||!le.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var r=e.length,n=t.length,o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},le.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},le.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return le.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=le.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){var i=e[r];if(De(i,Uint8Array)&&(i=le.from(i)),!le.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(n,o),o+=i.length}return n},le.byteLength=me,le.prototype._isBuffer=!0,le.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)ve(this,t,t+1);return this},le.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)ve(this,t,t+3),ve(this,t+1,t+2);return this},le.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)ve(this,t,t+7),ve(this,t+1,t+6),ve(this,t+2,t+5),ve(this,t+3,t+4);return this},le.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?Ee(this,0,e):function(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return Pe(this,t,r);case"utf8":case"utf-8":return Ee(this,t,r);case"ascii":return Oe(this,t,r);case"latin1":case"binary":return Re(this,t,r);case"base64":return xe(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Le(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}.apply(this,arguments)},le.prototype.toLocaleString=le.prototype.toString,le.prototype.equals=function(e){if(!le.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===le.compare(this,e)},le.prototype.inspect=function(){var e="",t=ae.INSPECT_MAX_BYTES;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},le.prototype.compare=function(e,t,r,n,o){if(De(e,Uint8Array)&&(e=le.from(e,e.offset,e.byteLength)),!le.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw new RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return-1;if(t>=r)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0),a=Math.min(i,s),u=this.slice(n,o),c=e.slice(t,r),l=0;l<a;++l)if(u[l]!==c[l]){i=u[l],s=c[l];break}return i<s?-1:s<i?1:0},le.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},le.prototype.indexOf=function(e,t,r){return ye(this,e,t,r,!0)},le.prototype.lastIndexOf=function(e,t,r){return ye(this,e,t,r,!1)},le.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var o=this.length-t;if((void 0===r||r>o)&&(r=o),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var i=!1;;)switch(n){case"hex":return be(this,e,t,r);case"utf8":case"utf-8":return _e(this,e,t,r);case"ascii":return Ae(this,e,t,r);case"latin1":case"binary":return ke(this,e,t,r);case"base64":return Ce(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return Se(this,e,t,r);default:if(i)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),i=!0}},le.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var Me=4096;function Oe(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}function Re(e,t,r){var n="";r=Math.min(e.length,r);for(var o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}function Pe(e,t,r){var n,o=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>o)&&(r=o);for(var i="",s=t;s<r;++s)i+=(n=e[s])<16?"0"+n.toString(16):n.toString(16);return i}function Le(e,t,r){for(var n=e.slice(t,r),o="",i=0;i<n.length;i+=2)o+=String.fromCharCode(n[i]+256*n[i+1]);return o}function Te(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function Ie(e,t,r,n,o,i){if(!le.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function ze(e,t,r,n,o,i){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function Ue(e,t,r,n,o){return t=+t,r>>>=0,o||ze(e,0,r,4),se.write(e,t,r,n,23,4),r+4}function je(e,t,r,n,o){return t=+t,r>>>=0,o||ze(e,0,r,8),se.write(e,t,r,n,52,8),r+8}le.prototype.slice=function(e,t){var r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);var n=this.subarray(e,t);return n.__proto__=le.prototype,n},le.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||Te(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n},le.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||Te(e,t,this.length);for(var n=this[e+--t],o=1;t>0&&(o*=256);)n+=this[e+--t]*o;return n},le.prototype.readUInt8=function(e,t){return e>>>=0,t||Te(e,1,this.length),this[e]},le.prototype.readUInt16LE=function(e,t){return e>>>=0,t||Te(e,2,this.length),this[e]|this[e+1]<<8},le.prototype.readUInt16BE=function(e,t){return e>>>=0,t||Te(e,2,this.length),this[e]<<8|this[e+1]},le.prototype.readUInt32LE=function(e,t){return e>>>=0,t||Te(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},le.prototype.readUInt32BE=function(e,t){return e>>>=0,t||Te(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},le.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||Te(e,t,this.length);for(var n=this[e],o=1,i=0;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},le.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||Te(e,t,this.length);for(var n=t,o=1,i=this[e+--n];n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},le.prototype.readInt8=function(e,t){return e>>>=0,t||Te(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},le.prototype.readInt16LE=function(e,t){e>>>=0,t||Te(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},le.prototype.readInt16BE=function(e,t){e>>>=0,t||Te(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},le.prototype.readInt32LE=function(e,t){return e>>>=0,t||Te(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},le.prototype.readInt32BE=function(e,t){return e>>>=0,t||Te(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},le.prototype.readFloatLE=function(e,t){return e>>>=0,t||Te(e,4,this.length),se.read(this,e,!0,23,4)},le.prototype.readFloatBE=function(e,t){return e>>>=0,t||Te(e,4,this.length),se.read(this,e,!1,23,4)},le.prototype.readDoubleLE=function(e,t){return e>>>=0,t||Te(e,8,this.length),se.read(this,e,!0,52,8)},le.prototype.readDoubleBE=function(e,t){return e>>>=0,t||Te(e,8,this.length),se.read(this,e,!1,52,8)},le.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||Ie(this,e,t,r,Math.pow(2,8*r)-1,0);var o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},le.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||Ie(this,e,t,r,Math.pow(2,8*r)-1,0);var o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},le.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,1,255,0),this[t]=255&e,t+1},le.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},le.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},le.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},le.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},le.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);Ie(this,e,t,r,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<r&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},le.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){var o=Math.pow(2,8*r-1);Ie(this,e,t,r,o-1,-o)}var i=r-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+r},le.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},le.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},le.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},le.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},le.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||Ie(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},le.prototype.writeFloatLE=function(e,t,r){return Ue(this,e,t,!0,r)},le.prototype.writeFloatBE=function(e,t,r){return Ue(this,e,t,!1,r)},le.prototype.writeDoubleLE=function(e,t,r){return je(this,e,t,!0,r)},le.prototype.writeDoubleBE=function(e,t,r){return je(this,e,t,!1,r)},le.prototype.copy=function(e,t,r,n){if(!le.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var o=n-r;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,r,n);else if(this===e&&r<t&&t<n)for(var i=o-1;i>=0;--i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,n),t);return o},le.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!le.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){var o=e.charCodeAt(0);("utf8"===n&&o<128||"latin1"===n)&&(e=o)}}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{var s=le.isBuffer(e)?e:le.from(e,n),a=s.length;if(0===a)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=s[i%a]}return this};var Be=/[^+\/0-9A-Za-z-_]/g;function Fe(e,t){var r;t=t||1/0;for(var n=e.length,o=null,i=[],s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=65536+(o-55296<<10|r-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}function Qe(e){return Y.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(Be,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Ne(e,t,r,n){for(var o=0;o<n&&!(o+r>=t.length||o>=e.length);++o)t[o+r]=e[o];return o}function De(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function qe(e){return e!=e}var $e={getArg:function(e,t,r){if(t in e)return e[t];if(3===arguments.length)return r;throw new Error('"'+t+'" is a required argument.')}},He=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,Ge=/^data:.+\,.+$/;function Ve(e){var t=e.match(He);return t?{scheme:t[1],auth:t[2],host:t[3],port:t[4],path:t[5]}:null}function We(e){var t="";return e.scheme&&(t+=e.scheme+":"),t+="//",e.auth&&(t+=e.auth+"@"),e.host&&(t+=e.host),e.port&&(t+=":"+e.port),e.path&&(t+=e.path),t}function Je(e){var t=e,r=Ve(e);if(r){if(!r.path)return e;t=r.path}for(var n,o=$e.isAbsolute(t),i=t.split(/\/+/),s=0,a=i.length-1;a>=0;a--)"."===(n=i[a])?i.splice(a,1):".."===n?s++:s>0&&(""===n?(i.splice(a+1,s),s=0):(i.splice(a,2),s--));return""===(t=i.join("/"))&&(t=o?"/":"."),r?(r.path=t,We(r)):t}function Ze(e,t){""===e&&(e="."),""===t&&(t=".");var r=Ve(t),n=Ve(e);if(n&&(e=n.path||"/"),r&&!r.scheme)return n&&(r.scheme=n.scheme),We(r);if(r||t.match(Ge))return t;if(n&&!n.host&&!n.path)return n.host=t,We(n);var o="/"===t.charAt(0)?t:Je(e.replace(/\/+$/,"")+"/"+t);return n?(n.path=o,We(n)):o}$e.urlParse=Ve,$e.normalize=Je,$e.join=Ze,$e.isAbsolute=function(e){return"/"===e.charAt(0)||He.test(e)},$e.relative=function(e,t){""===e&&(e="."),e=e.replace(/\/$/,"");for(var r=0;0!==t.indexOf(e+"/");){var n=e.lastIndexOf("/");if(n<0)return t;if((e=e.slice(0,n)).match(/^([^\/]+:\/)?\/*$/))return t;++r}return Array(r+1).join("../")+t.substr(e.length+1)};var Ye=!("__proto__"in Object.create(null));function Xe(e){return e}function Ke(e){if(!e)return!1;var t=e.length;if(t<9)return!1;if(95!==e.charCodeAt(t-1)||95!==e.charCodeAt(t-2)||111!==e.charCodeAt(t-3)||116!==e.charCodeAt(t-4)||111!==e.charCodeAt(t-5)||114!==e.charCodeAt(t-6)||112!==e.charCodeAt(t-7)||95!==e.charCodeAt(t-8)||95!==e.charCodeAt(t-9))return!1;for(var r=t-10;r>=0;r--)if(36!==e.charCodeAt(r))return!1;return!0}function et(e,t){return e===t?0:null===e?1:null===t?-1:e>t?1:-1}$e.toSetString=Ye?Xe:function(e){return Ke(e)?"$"+e:e},$e.fromSetString=Ye?Xe:function(e){return Ke(e)?e.slice(1):e},$e.compareByOriginalPositions=function(e,t,r){var n=et(e.source,t.source);return 0!==n?n:0!=(n=e.originalLine-t.originalLine)?n:0!=(n=e.originalColumn-t.originalColumn)||r?n:0!=(n=e.generatedColumn-t.generatedColumn)?n:0!=(n=e.generatedLine-t.generatedLine)?n:et(e.name,t.name)},$e.compareByGeneratedPositionsDeflated=function(e,t,r){var n=e.generatedLine-t.generatedLine;return 0!==n?n:0!=(n=e.generatedColumn-t.generatedColumn)||r?n:0!==(n=et(e.source,t.source))?n:0!=(n=e.originalLine-t.originalLine)?n:0!=(n=e.originalColumn-t.originalColumn)?n:et(e.name,t.name)},$e.compareByGeneratedPositionsInflated=function(e,t){var r=e.generatedLine-t.generatedLine;return 0!==r?r:0!=(r=e.generatedColumn-t.generatedColumn)?r:0!==(r=et(e.source,t.source))?r:0!=(r=e.originalLine-t.originalLine)?r:0!=(r=e.originalColumn-t.originalColumn)?r:et(e.name,t.name)},$e.parseSourceMapInput=function(e){return JSON.parse(e.replace(/^\)]}'[^\n]*\n/,""))},$e.computeSourceURL=function(e,t,r){if(t=t||"",e&&("/"!==e[e.length-1]&&"/"!==t[0]&&(e+="/"),t=e+t),r){var n=Ve(r);if(!n)throw new Error("sourceMapURL could not be parsed");if(n.path){var o=n.path.lastIndexOf("/");o>=0&&(n.path=n.path.substring(0,o+1))}t=Ze(We(n),t)}return Je(t)};var tt={},rt=Object.prototype.hasOwnProperty,nt="undefined"!=typeof Map;function ot(){this._array=[],this._set=nt?new Map:Object.create(null)}ot.fromArray=function(e,t){for(var r=new ot,n=0,o=e.length;n<o;n++)r.add(e[n],t);return r},ot.prototype.size=function(){return nt?this._set.size:Object.getOwnPropertyNames(this._set).length},ot.prototype.add=function(e,t){var r=nt?e:$e.toSetString(e),n=nt?this.has(e):rt.call(this._set,r),o=this._array.length;n&&!t||this._array.push(e),n||(nt?this._set.set(e,o):this._set[r]=o)},ot.prototype.has=function(e){if(nt)return this._set.has(e);var t=$e.toSetString(e);return rt.call(this._set,t)},ot.prototype.indexOf=function(e){if(nt){var t=this._set.get(e);if(t>=0)return t}else{var r=$e.toSetString(e);if(rt.call(this._set,r))return this._set[r]}throw new Error('"'+e+'" is not in the set.')},ot.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)},ot.prototype.toArray=function(){return this._array.slice()},tt.ArraySet=ot;var it={},st="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");it.encode=function(e){if(0<=e&&e<st.length)return st[e];throw new TypeError("Must be between 0 and 63: "+e)},it.decode=function(e){return 65<=e&&e<=90?e-65:97<=e&&e<=122?e-97+26:48<=e&&e<=57?e-48+52:43==e?62:47==e?63:-1};var at={encode:function(e){var t,r="",n=function(e){return e<0?1+(-e<<1):0+(e<<1)}(e);do{t=31&n,(n>>>=5)>0&&(t|=32),r+=it.encode(t)}while(n>0);return r},decode:function(e,t,r){var n,o,i,s,a=e.length,u=0,c=0;do{if(t>=a)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(o=it.decode(e.charCodeAt(t++))))throw new Error("Invalid base64 digit: "+e.charAt(t-1));n=!!(32&o),u+=(o&=31)<<c,c+=5}while(n);r.value=(s=(i=u)>>1,1==(1&i)?-s:s),r.rest=t}},ut={GREATEST_LOWER_BOUND:1,LEAST_UPPER_BOUND:2,search:function(e,t,r,n){if(0===t.length)return-1;var o=function e(t,r,n,o,i,s){var a=Math.floor((r-t)/2)+t,u=i(n,o[a],!0);return 0===u?a:u>0?r-a>1?e(a,r,n,o,i,s):s==ut.LEAST_UPPER_BOUND?r<o.length?r:-1:a:a-t>1?e(t,a,n,o,i,s):s==ut.LEAST_UPPER_BOUND?a:t<0?-1:t}(-1,t.length,e,t,r,n||ut.GREATEST_LOWER_BOUND);if(o<0)return-1;for(;o-1>=0&&0===r(t[o],t[o-1],!0);)--o;return o}},ct={};function lt(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}ct.quickSort=function(e,t){!function e(t,r,n,o){if(n<o){var i=n-1;lt(t,(c=n,l=o,Math.round(c+Math.random()*(l-c))),o);for(var s=t[o],a=n;a<o;a++)r(t[a],s)<=0&&lt(t,i+=1,a);lt(t,i+1,a);var u=i+1;e(t,r,n,u-1),e(t,r,u+1,o)}var c,l}(e,t,0,e.length-1)};var ht={},ft=tt.ArraySet,pt=ct.quickSort;function dt(e,t){var r=e;return"string"==typeof e&&(r=$e.parseSourceMapInput(e)),null!=r.sections?new vt(r,t):new gt(r,t)}function gt(e,t){var r=e;"string"==typeof e&&(r=$e.parseSourceMapInput(e));var n=$e.getArg(r,"version"),o=$e.getArg(r,"sources"),i=$e.getArg(r,"names",[]),s=$e.getArg(r,"sourceRoot",null),a=$e.getArg(r,"sourcesContent",null),u=$e.getArg(r,"mappings"),c=$e.getArg(r,"file",null);if(n!=this._version)throw new Error("Unsupported version: "+n);s&&(s=$e.normalize(s)),o=o.map(String).map($e.normalize).map(function(e){return s&&$e.isAbsolute(s)&&$e.isAbsolute(e)?$e.relative(s,e):e}),this._names=ft.fromArray(i.map(String),!0),this._sources=ft.fromArray(o,!0),this._absoluteSources=this._sources.toArray().map(function(e){return $e.computeSourceURL(s,e,t)}),this.sourceRoot=s,this.sourcesContent=a,this._mappings=u,this._sourceMapURL=t,this.file=c}function mt(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function vt(e,t){var r=e;"string"==typeof e&&(r=$e.parseSourceMapInput(e));var n=$e.getArg(r,"version"),o=$e.getArg(r,"sections");if(n!=this._version)throw new Error("Unsupported version: "+n);this._sources=new ft,this._names=new ft;var i={line:-1,column:0};this._sections=o.map(function(e){if(e.url)throw new Error("Support for url field in sections not implemented.");var r=$e.getArg(e,"offset"),n=$e.getArg(r,"line"),o=$e.getArg(r,"column");if(n<i.line||n===i.line&&o<i.column)throw new Error("Section offsets must be ordered and non-overlapping.");return i=r,{generatedOffset:{generatedLine:n+1,generatedColumn:o+1},consumer:new dt($e.getArg(e,"map"),t)}})}dt.fromSourceMap=function(e,t){return gt.fromSourceMap(e,t)},dt.prototype._version=3,dt.prototype.__generatedMappings=null,Object.defineProperty(dt.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),dt.prototype.__originalMappings=null,Object.defineProperty(dt.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),dt.prototype._charIsMappingSeparator=function(e,t){var r=e.charAt(t);return";"===r||","===r},dt.prototype._parseMappings=function(e,t){throw new Error("Subclasses must implement _parseMappings")},dt.GENERATED_ORDER=1,dt.ORIGINAL_ORDER=2,dt.GREATEST_LOWER_BOUND=1,dt.LEAST_UPPER_BOUND=2,dt.prototype.eachMapping=function(e,t,r){var n,o=t||null;switch(r||dt.GENERATED_ORDER){case dt.GENERATED_ORDER:n=this._generatedMappings;break;case dt.ORIGINAL_ORDER:n=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var i=this.sourceRoot;n.map(function(e){var t=null===e.source?null:this._sources.at(e.source);return{source:t=$e.computeSourceURL(i,t,this._sourceMapURL),generatedLine:e.generatedLine,generatedColumn:e.generatedColumn,originalLine:e.originalLine,originalColumn:e.originalColumn,name:null===e.name?null:this._names.at(e.name)}},this).forEach(e,o)},dt.prototype.allGeneratedPositionsFor=function(e){var t=$e.getArg(e,"line"),r={source:$e.getArg(e,"source"),originalLine:t,originalColumn:$e.getArg(e,"column",0)};if(r.source=this._findSourceIndex(r.source),r.source<0)return[];var n=[],o=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",$e.compareByOriginalPositions,ut.LEAST_UPPER_BOUND);if(o>=0){var i=this._originalMappings[o];if(void 0===e.column)for(var s=i.originalLine;i&&i.originalLine===s;)n.push({line:$e.getArg(i,"generatedLine",null),column:$e.getArg(i,"generatedColumn",null),lastColumn:$e.getArg(i,"lastGeneratedColumn",null)}),i=this._originalMappings[++o];else for(var a=i.originalColumn;i&&i.originalLine===t&&i.originalColumn==a;)n.push({line:$e.getArg(i,"generatedLine",null),column:$e.getArg(i,"generatedColumn",null),lastColumn:$e.getArg(i,"lastGeneratedColumn",null)}),i=this._originalMappings[++o]}return n},ht.SourceMapConsumer=dt,gt.prototype=Object.create(dt.prototype),gt.prototype.consumer=dt,gt.prototype._findSourceIndex=function(e){var t,r=e;if(null!=this.sourceRoot&&(r=$e.relative(this.sourceRoot,r)),this._sources.has(r))return this._sources.indexOf(r);for(t=0;t<this._absoluteSources.length;++t)if(this._absoluteSources[t]==e)return t;return-1},gt.fromSourceMap=function(e,t){var r=Object.create(gt.prototype),n=r._names=ft.fromArray(e._names.toArray(),!0),o=r._sources=ft.fromArray(e._sources.toArray(),!0);r.sourceRoot=e._sourceRoot,r.sourcesContent=e._generateSourcesContent(r._sources.toArray(),r.sourceRoot),r.file=e._file,r._sourceMapURL=t,r._absoluteSources=r._sources.toArray().map(function(e){return $e.computeSourceURL(r.sourceRoot,e,t)});for(var i=e._mappings.toArray().slice(),s=r.__generatedMappings=[],a=r.__originalMappings=[],u=0,c=i.length;u<c;u++){var l=i[u],h=new mt;h.generatedLine=l.generatedLine,h.generatedColumn=l.generatedColumn,l.source&&(h.source=o.indexOf(l.source),h.originalLine=l.originalLine,h.originalColumn=l.originalColumn,l.name&&(h.name=n.indexOf(l.name)),a.push(h)),s.push(h)}return pt(r.__originalMappings,$e.compareByOriginalPositions),r},gt.prototype._version=3,Object.defineProperty(gt.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),gt.prototype._parseMappings=function(e,t){for(var r,n,o,i,s,a=1,u=0,c=0,l=0,h=0,f=0,p=e.length,d=0,g={},m={},v=[],y=[];d<p;)if(";"===e.charAt(d))a++,d++,u=0;else if(","===e.charAt(d))d++;else{for((r=new mt).generatedLine=a,i=d;i<p&&!this._charIsMappingSeparator(e,i);i++);if(o=g[n=e.slice(d,i)])d+=n.length;else{for(o=[];d<i;)at.decode(e,d,m),s=m.value,d=m.rest,o.push(s);if(2===o.length)throw new Error("Found a source, but no line and column");if(3===o.length)throw new Error("Found a source and line, but no column");g[n]=o}r.generatedColumn=u+o[0],u=r.generatedColumn,o.length>1&&(r.source=h+o[1],h+=o[1],r.originalLine=c+o[2],c=r.originalLine,r.originalLine+=1,r.originalColumn=l+o[3],l=r.originalColumn,o.length>4&&(r.name=f+o[4],f+=o[4])),y.push(r),"number"==typeof r.originalLine&&v.push(r)}pt(y,$e.compareByGeneratedPositionsDeflated),this.__generatedMappings=y,pt(v,$e.compareByOriginalPositions),this.__originalMappings=v},gt.prototype._findMapping=function(e,t,r,n,o,i){if(e[r]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[r]);if(e[n]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[n]);return ut.search(e,t,o,i)},gt.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var t=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var r=this._generatedMappings[e+1];if(t.generatedLine===r.generatedLine){t.lastGeneratedColumn=r.generatedColumn-1;continue}}t.lastGeneratedColumn=1/0}},gt.prototype.originalPositionFor=function(e){var t={generatedLine:$e.getArg(e,"line"),generatedColumn:$e.getArg(e,"column")},r=this._findMapping(t,this._generatedMappings,"generatedLine","generatedColumn",$e.compareByGeneratedPositionsDeflated,$e.getArg(e,"bias",dt.GREATEST_LOWER_BOUND));if(r>=0){var n=this._generatedMappings[r];if(n.generatedLine===t.generatedLine){var o=$e.getArg(n,"source",null);null!==o&&(o=this._sources.at(o),o=$e.computeSourceURL(this.sourceRoot,o,this._sourceMapURL));var i=$e.getArg(n,"name",null);return null!==i&&(i=this._names.at(i)),{source:o,line:$e.getArg(n,"originalLine",null),column:$e.getArg(n,"originalColumn",null),name:i}}}return{source:null,line:null,column:null,name:null}},gt.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(e){return null==e})},gt.prototype.sourceContentFor=function(e,t){if(!this.sourcesContent)return null;var r=this._findSourceIndex(e);if(r>=0)return this.sourcesContent[r];var n,o=e;if(null!=this.sourceRoot&&(o=$e.relative(this.sourceRoot,o)),null!=this.sourceRoot&&(n=$e.urlParse(this.sourceRoot))){var i=o.replace(/^file:\/\//,"");if("file"==n.scheme&&this._sources.has(i))return this.sourcesContent[this._sources.indexOf(i)];if((!n.path||"/"==n.path)&&this._sources.has("/"+o))return this.sourcesContent[this._sources.indexOf("/"+o)]}if(t)return null;throw new Error('"'+o+'" is not in the SourceMap.')},gt.prototype.generatedPositionFor=function(e){var t=$e.getArg(e,"source");if((t=this._findSourceIndex(t))<0)return{line:null,column:null,lastColumn:null};var r={source:t,originalLine:$e.getArg(e,"line"),originalColumn:$e.getArg(e,"column")},n=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",$e.compareByOriginalPositions,$e.getArg(e,"bias",dt.GREATEST_LOWER_BOUND));if(n>=0){var o=this._originalMappings[n];if(o.source===r.source)return{line:$e.getArg(o,"generatedLine",null),column:$e.getArg(o,"generatedColumn",null),lastColumn:$e.getArg(o,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},vt.prototype=Object.create(dt.prototype),vt.prototype.constructor=dt,vt.prototype._version=3,Object.defineProperty(vt.prototype,"sources",{get:function(){for(var e=[],t=0;t<this._sections.length;t++)for(var r=0;r<this._sections[t].consumer.sources.length;r++)e.push(this._sections[t].consumer.sources[r]);return e}}),vt.prototype.originalPositionFor=function(e){var t={generatedLine:$e.getArg(e,"line"),generatedColumn:$e.getArg(e,"column")},r=ut.search(t,this._sections,function(e,t){return e.generatedLine-t.generatedOffset.generatedLine||e.generatedColumn-t.generatedOffset.generatedColumn}),n=this._sections[r];return n?n.consumer.originalPositionFor({line:t.generatedLine-(n.generatedOffset.generatedLine-1),column:t.generatedColumn-(n.generatedOffset.generatedLine===t.generatedLine?n.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}},vt.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(e){return e.consumer.hasContentsOfAllSources()})},vt.prototype.sourceContentFor=function(e,t){for(var r=0;r<this._sections.length;r++){var n=this._sections[r].consumer.sourceContentFor(e,!0);if(n)return n}if(t)return null;throw new Error('"'+e+'" is not in the SourceMap.')},vt.prototype.generatedPositionFor=function(e){for(var t=0;t<this._sections.length;t++){var r=this._sections[t];if(-1!==r.consumer._findSourceIndex($e.getArg(e,"source"))){var n=r.consumer.generatedPositionFor(e);if(n)return{line:n.line+(r.generatedOffset.generatedLine-1),column:n.column+(r.generatedOffset.generatedLine===n.line?r.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},vt.prototype._parseMappings=function(e,t){this.__generatedMappings=[],this.__originalMappings=[];for(var r=0;r<this._sections.length;r++)for(var n=this._sections[r],o=n.consumer._generatedMappings,i=0;i<o.length;i++){var s=o[i],a=n.consumer._sources.at(s.source);a=$e.computeSourceURL(n.consumer.sourceRoot,a,this._sourceMapURL),this._sources.add(a),a=this._sources.indexOf(a);var u=null;s.name&&(u=n.consumer._names.at(s.name),this._names.add(u),u=this._names.indexOf(u));var c={source:a,generatedLine:s.generatedLine+(n.generatedOffset.generatedLine-1),generatedColumn:s.generatedColumn+(n.generatedOffset.generatedLine===s.generatedLine?n.generatedOffset.generatedColumn-1:0),originalLine:s.originalLine,originalColumn:s.originalColumn,name:u};this.__generatedMappings.push(c),"number"==typeof c.originalLine&&this.__originalMappings.push(c)}pt(this.__generatedMappings,$e.compareByGeneratedPositionsDeflated),pt(this.__originalMappings,$e.compareByOriginalPositions)};var yt={};function wt(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}wt.prototype.unsortedForEach=function(e,t){this._array.forEach(e,t)},wt.prototype.add=function(e){var t,r,n,o,i,s;r=e,n=(t=this._last).generatedLine,o=r.generatedLine,i=t.generatedColumn,s=r.generatedColumn,o>n||o==n&&s>=i||$e.compareByGeneratedPositionsInflated(t,r)<=0?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))},wt.prototype.toArray=function(){return this._sorted||(this._array.sort($e.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},yt.MappingList=wt;var bt={},_t=tt.ArraySet,At=yt.MappingList;function kt(e){e||(e={}),this._file=$e.getArg(e,"file",null),this._sourceRoot=$e.getArg(e,"sourceRoot",null),this._skipValidation=$e.getArg(e,"skipValidation",!1),this._sources=new _t,this._names=new _t,this._mappings=new At,this._sourcesContents=null}kt.prototype._version=3,kt.fromSourceMap=function(e){var t=e.sourceRoot,r=new kt({file:e.file,sourceRoot:t});return e.eachMapping(function(e){var n={generated:{line:e.generatedLine,column:e.generatedColumn}};null!=e.source&&(n.source=e.source,null!=t&&(n.source=$e.relative(t,n.source)),n.original={line:e.originalLine,column:e.originalColumn},null!=e.name&&(n.name=e.name)),r.addMapping(n)}),e.sources.forEach(function(n){var o=n;null!==t&&(o=$e.relative(t,n)),r._sources.has(o)||r._sources.add(o);var i=e.sourceContentFor(n);null!=i&&r.setSourceContent(n,i)}),r},kt.prototype.addMapping=function(e){var t=$e.getArg(e,"generated"),r=$e.getArg(e,"original",null),n=$e.getArg(e,"source",null),o=$e.getArg(e,"name",null);this._skipValidation||this._validateMapping(t,r,n,o),null!=n&&(n=String(n),this._sources.has(n)||this._sources.add(n)),null!=o&&(o=String(o),this._names.has(o)||this._names.add(o)),this._mappings.add({generatedLine:t.line,generatedColumn:t.column,originalLine:null!=r&&r.line,originalColumn:null!=r&&r.column,source:n,name:o})},kt.prototype.setSourceContent=function(e,t){var r=e;null!=this._sourceRoot&&(r=$e.relative(this._sourceRoot,r)),null!=t?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[$e.toSetString(r)]=t):this._sourcesContents&&(delete this._sourcesContents[$e.toSetString(r)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},kt.prototype.applySourceMap=function(e,t,r){var n=t;if(null==t){if(null==e.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');n=e.file}var o=this._sourceRoot;null!=o&&(n=$e.relative(o,n));var i=new _t,s=new _t;this._mappings.unsortedForEach(function(t){if(t.source===n&&null!=t.originalLine){var a=e.originalPositionFor({line:t.originalLine,column:t.originalColumn});null!=a.source&&(t.source=a.source,null!=r&&(t.source=$e.join(r,t.source)),null!=o&&(t.source=$e.relative(o,t.source)),t.originalLine=a.line,t.originalColumn=a.column,null!=a.name&&(t.name=a.name))}var u=t.source;null==u||i.has(u)||i.add(u);var c=t.name;null==c||s.has(c)||s.add(c)},this),this._sources=i,this._names=s,e.sources.forEach(function(t){var n=e.sourceContentFor(t);null!=n&&(null!=r&&(t=$e.join(r,t)),null!=o&&(t=$e.relative(o,t)),this.setSourceContent(t,n))},this)},kt.prototype._validateMapping=function(e,t,r,n){if(t&&"number"!=typeof t.line&&"number"!=typeof t.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0)||t||r||n)&&!(e&&"line"in e&&"column"in e&&t&&"line"in t&&"column"in t&&e.line>0&&e.column>=0&&t.line>0&&t.column>=0&&r))throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:r,original:t,name:n}))},kt.prototype._serializeMappings=function(){for(var e,t,r,n,o=0,i=1,s=0,a=0,u=0,c=0,l="",h=this._mappings.toArray(),f=0,p=h.length;f<p;f++){if(e="",(t=h[f]).generatedLine!==i)for(o=0;t.generatedLine!==i;)e+=";",i++;else if(f>0){if(!$e.compareByGeneratedPositionsInflated(t,h[f-1]))continue;e+=","}e+=at.encode(t.generatedColumn-o),o=t.generatedColumn,null!=t.source&&(n=this._sources.indexOf(t.source),e+=at.encode(n-c),c=n,e+=at.encode(t.originalLine-1-a),a=t.originalLine-1,e+=at.encode(t.originalColumn-s),s=t.originalColumn,null!=t.name&&(r=this._names.indexOf(t.name),e+=at.encode(r-u),u=r)),l+=e}return l},kt.prototype._generateSourcesContent=function(e,t){return e.map(function(e){if(!this._sourcesContents)return null;null!=t&&(e=$e.relative(t,e));var r=$e.toSetString(e);return Object.prototype.hasOwnProperty.call(this._sourcesContents,r)?this._sourcesContents[r]:null},this)},kt.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(e.file=this._file),null!=this._sourceRoot&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e},kt.prototype.toString=function(){return JSON.stringify(this.toJSON())},bt.SourceMapGenerator=kt;var Ct={},St=bt.SourceMapGenerator,xt=/(\r?\n)/,Et="$$$isSourceNode$$$";function Mt(e,t,r,n,o){this.children=[],this.sourceContents={},this.line=null==e?null:e,this.column=null==t?null:t,this.source=null==r?null:r,this.name=null==o?null:o,this[Et]=!0,null!=n&&this.add(n)}Mt.fromStringWithSourceMap=function(e,t,r){var n=new Mt,o=e.split(xt),i=0,s=function(){return e()+(e()||"");function e(){return i<o.length?o[i++]:void 0}},a=1,u=0,c=null;return t.eachMapping(function(e){if(null!==c){if(!(a<e.generatedLine)){var t=(r=o[i]||"").substr(0,e.generatedColumn-u);return o[i]=r.substr(e.generatedColumn-u),u=e.generatedColumn,l(c,t),void(c=e)}l(c,s()),a++,u=0}for(;a<e.generatedLine;)n.add(s()),a++;if(u<e.generatedColumn){var r=o[i]||"";n.add(r.substr(0,e.generatedColumn)),o[i]=r.substr(e.generatedColumn),u=e.generatedColumn}c=e},this),i<o.length&&(c&&l(c,s()),n.add(o.splice(i).join(""))),t.sources.forEach(function(e){var o=t.sourceContentFor(e);null!=o&&(null!=r&&(e=$e.join(r,e)),n.setSourceContent(e,o))}),n;function l(e,t){if(null===e||void 0===e.source)n.add(t);else{var o=r?$e.join(r,e.source):e.source;n.add(new Mt(e.originalLine,e.originalColumn,o,t,e.name))}}},Mt.prototype.add=function(e){if(Array.isArray(e))e.forEach(function(e){this.add(e)},this);else{if(!e[Et]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);e&&this.children.push(e)}return this},Mt.prototype.prepend=function(e){if(Array.isArray(e))for(var t=e.length-1;t>=0;t--)this.prepend(e[t]);else{if(!e[Et]&&"string"!=typeof e)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);this.children.unshift(e)}return this},Mt.prototype.walk=function(e){for(var t,r=0,n=this.children.length;r<n;r++)(t=this.children[r])[Et]?t.walk(e):""!==t&&e(t,{source:this.source,line:this.line,column:this.column,name:this.name})},Mt.prototype.join=function(e){var t,r,n=this.children.length;if(n>0){for(t=[],r=0;r<n-1;r++)t.push(this.children[r]),t.push(e);t.push(this.children[r]),this.children=t}return this},Mt.prototype.replaceRight=function(e,t){var r=this.children[this.children.length-1];return r[Et]?r.replaceRight(e,t):"string"==typeof r?this.children[this.children.length-1]=r.replace(e,t):this.children.push("".replace(e,t)),this},Mt.prototype.setSourceContent=function(e,t){this.sourceContents[$e.toSetString(e)]=t},Mt.prototype.walkSourceContents=function(e){for(var t=0,r=this.children.length;t<r;t++)this.children[t][Et]&&this.children[t].walkSourceContents(e);var n=Object.keys(this.sourceContents);for(t=0,r=n.length;t<r;t++)e($e.fromSetString(n[t]),this.sourceContents[n[t]])},Mt.prototype.toString=function(){var e="";return this.walk(function(t){e+=t}),e},Mt.prototype.toStringWithSourceMap=function(e){var t={code:"",line:1,column:0},r=new St(e),n=!1,o=null,i=null,s=null,a=null;return this.walk(function(e,u){t.code+=e,null!==u.source&&null!==u.line&&null!==u.column?(o===u.source&&i===u.line&&s===u.column&&a===u.name||r.addMapping({source:u.source,original:{line:u.line,column:u.column},generated:{line:t.line,column:t.column},name:u.name}),o=u.source,i=u.line,s=u.column,a=u.name,n=!0):n&&(r.addMapping({generated:{line:t.line,column:t.column}}),o=null,n=!1);for(var c=0,l=e.length;c<l;c++)10===e.charCodeAt(c)?(t.line++,t.column=0,c+1===l?(o=null,n=!1):n&&r.addMapping({source:u.source,original:{line:u.line,column:u.column},generated:{line:t.line,column:t.column},name:u.name})):t.column++}),this.walkSourceContents(function(e,t){r.setSourceContent(e,t)}),{code:t.code,map:r}},Ct.SourceNode=Mt;var Ot={};Ot.SourceMapGenerator=bt.SourceMapGenerator,Ot.SourceMapConsumer=ht.SourceMapConsumer,Ot.SourceNode=Ct.SourceNode;var Rt={};(function(e){"use strict";Rt.__esModule=!0,Rt.default=void 0;var t=o(Ot),r=o(Z),n=o(l);function o(e){return e&&e.__esModule?e:{default:e}}var i=function(){function o(e,t){this.loadAnnotation(e),this.inline=this.startWith(this.annotation,"data:");var r=t.map?t.map.prev:void 0,n=this.loadMap(t.from,r);n&&(this.text=n)}var i=o.prototype;return i.consumer=function(){return this.consumerCache||(this.consumerCache=new t.default.SourceMapConsumer(this.text)),this.consumerCache},i.withContent=function(){return!!(this.consumer().sourcesContent&&this.consumer().sourcesContent.length>0)},i.startWith=function(e,t){return!!e&&e.substr(0,t.length)===t},i.loadAnnotation=function(e){var t=e.match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//);t&&(this.annotation=t[1].trim())},i.decodeInline=function(t){var r,n="data:application/json,";if(this.startWith(t,n))return decodeURIComponent(t.substr(n.length));if(/^data:application\/json;charset=utf-?8;base64,/.test(t)||/^data:application\/json;base64,/.test(t))return r=t.substr(RegExp.lastMatch.length),e?e.from(r,"base64").toString():window.atob(r);var o=t.match(/data:application\/json;([^,]+),/)[1];throw new Error("Unsupported source map encoding "+o)},i.loadMap=function(e,o){if(!1===o)return!1;if(o){if("string"==typeof o)return o;if("function"==typeof o){var i=o(e);if(i&&n.default.existsSync&&n.default.existsSync(i))return n.default.readFileSync(i,"utf-8").toString().trim();throw new Error("Unable to load previous source map: "+i.toString())}if(o instanceof t.default.SourceMapConsumer)return t.default.SourceMapGenerator.fromSourceMap(o).toString();if(o instanceof t.default.SourceMapGenerator)return o.toString();if(this.isMap(o))return JSON.stringify(o);throw new Error("Unsupported previous source map format: "+o.toString())}if(this.inline)return this.decodeInline(this.annotation);if(this.annotation){var s=this.annotation;return e&&(s=r.default.join(r.default.dirname(e),s)),this.root=r.default.dirname(s),!(!n.default.existsSync||!n.default.existsSync(s))&&n.default.readFileSync(s,"utf-8").toString().trim()}},i.isMap=function(e){return"object"==typeof e&&("string"==typeof e.mappings||"string"==typeof e._mappings)},o}();Rt.default=i,Rt=Rt.default}).call(this,ae.Buffer);var Pt={__esModule:!0,default:void 0},Lt=zt(h),Tt=zt(Rt),It=zt(Z);function zt(e){return e&&e.__esModule?e:{default:e}}function Ut(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var jt=0,Bt=function(){function e(e,t){if(void 0===t&&(t={}),null===e||"object"==typeof e&&!e.toString)throw new Error("PostCSS received "+e+" instead of CSS string");this.css=e.toString(),"\ufeff"!==this.css[0]&&"\ufffe"!==this.css[0]||(this.css=this.css.slice(1)),t.from&&(/^\w+:\/\//.test(t.from)?this.file=t.from:this.file=It.default.resolve(t.from));var r=new Tt.default(this.css,t);if(r.text){this.map=r;var n=r.consumer().file;!this.file&&n&&(this.file=this.mapResolve(n))}this.file||(jt+=1,this.id="<input css "+jt+">"),this.map&&(this.map.file=this.from)}var t,r,n=e.prototype;return n.error=function(e,t,r,n){var o;void 0===n&&(n={});var i=this.origin(t,r);return(o=i?new Lt.default(e,i.line,i.column,i.source,i.file,n.plugin):new Lt.default(e,t,r,this.css,this.file,n.plugin)).input={line:t,column:r,source:this.css},this.file&&(o.input.file=this.file),o},n.origin=function(e,t){if(!this.map)return!1;var r=this.map.consumer(),n=r.originalPositionFor({line:e,column:t});if(!n.source)return!1;var o={file:this.mapResolve(n.source),line:n.line,column:n.column},i=r.sourceContentFor(n.source);return i&&(o.source=i),o},n.mapResolve=function(e){return/^\w+:\/\//.test(e)?e:It.default.resolve(this.map.consumer().sourceRoot||".",e)},t=e,(r=[{key:"from",get:function(){return this.file||this.id}}])&&Ut(t.prototype,r),e}();Pt.default=Bt,Pt=Pt.default;var Ft={__esModule:!0,default:void 0},Qt={split:function(e,t,r){for(var n=[],o="",i=!1,s=0,a=!1,u=!1,c=0;c<e.length;c++){var l=e[c];a?u?u=!1:"\\"===l?u=!0:l===a&&(a=!1):'"'===l||"'"===l?a=l:"("===l?s+=1:")"===l?s>0&&(s-=1):0===s&&-1!==t.indexOf(l)&&(i=!0),i?(""!==o&&n.push(o.trim()),o="",i=!1):o+=l}return(r||""!==o)&&n.push(o.trim()),n},space:function(e){return Qt.split(e,[" ","\n","\t"])},comma:function(e){return Qt.split(e,[","],!0)}},Nt=Qt;Ft.default=Nt,Ft=Ft.default;var Dt={};(function(e){"use strict";Dt.__esModule=!0,Dt.default=void 0;var t=n(Ot),r=n(Z);function n(e){return e&&e.__esModule?e:{default:e}}var o=function(){function n(e,t,r){this.stringify=e,this.mapOpts=r.map||{},this.root=t,this.opts=r}var o=n.prototype;return o.isMap=function(){return void 0!==this.opts.map?!!this.opts.map:this.previous().length>0},o.previous=function(){var e=this;return this.previousMaps||(this.previousMaps=[],this.root.walk(function(t){if(t.source&&t.source.input.map){var r=t.source.input.map;-1===e.previousMaps.indexOf(r)&&e.previousMaps.push(r)}})),this.previousMaps},o.isInline=function(){if(void 0!==this.mapOpts.inline)return this.mapOpts.inline;var e=this.mapOpts.annotation;return(void 0===e||!0===e)&&(!this.previous().length||this.previous().some(function(e){return e.inline}))},o.isSourcesContent=function(){return void 0!==this.mapOpts.sourcesContent?this.mapOpts.sourcesContent:!this.previous().length||this.previous().some(function(e){return e.withContent()})},o.clearAnnotation=function(){if(!1!==this.mapOpts.annotation)for(var e,t=this.root.nodes.length-1;t>=0;t--)"comment"===(e=this.root.nodes[t]).type&&0===e.text.indexOf("# sourceMappingURL=")&&this.root.removeChild(t)},o.setSourcesContent=function(){var e=this,t={};this.root.walk(function(r){if(r.source){var n=r.source.input.from;if(n&&!t[n]){t[n]=!0;var o=e.relative(n);e.map.setSourceContent(o,r.source.input.css)}}})},o.applyPrevMaps=function(){var e=this.previous(),n=Array.isArray(e),o=0;for(e=n?e:e[Symbol.iterator]();;){var i;if(n){if(o>=e.length)break;i=e[o++]}else{if((o=e.next()).done)break;i=o.value}var s=i,a=this.relative(s.file),u=s.root||r.default.dirname(s.file),c=void 0;!1===this.mapOpts.sourcesContent?(c=new t.default.SourceMapConsumer(s.text)).sourcesContent&&(c.sourcesContent=c.sourcesContent.map(function(){return null})):c=s.consumer(),this.map.applySourceMap(c,a,this.relative(u))}},o.isAnnotation=function(){return!!this.isInline()||(void 0!==this.mapOpts.annotation?this.mapOpts.annotation:!this.previous().length||this.previous().some(function(e){return e.annotation}))},o.toBase64=function(t){return e?e.from(t).toString("base64"):window.btoa(unescape(encodeURIComponent(t)))},o.addAnnotation=function(){var e;e=this.isInline()?"data:application/json;base64,"+this.toBase64(this.map.toString()):"string"==typeof this.mapOpts.annotation?this.mapOpts.annotation:this.outputFile()+".map";var t="\n";-1!==this.css.indexOf("\r\n")&&(t="\r\n"),this.css+=t+"/*# sourceMappingURL="+e+" */"},o.outputFile=function(){return this.opts.to?this.relative(this.opts.to):this.opts.from?this.relative(this.opts.from):"to.css"},o.generateMap=function(){return this.generateString(),this.isSourcesContent()&&this.setSourcesContent(),this.previous().length>0&&this.applyPrevMaps(),this.isAnnotation()&&this.addAnnotation(),this.isInline()?[this.css]:[this.css,this.map]},o.relative=function(e){if(0===e.indexOf("<"))return e;if(/^\w+:\/\//.test(e))return e;var t=this.opts.to?r.default.dirname(this.opts.to):".";return"string"==typeof this.mapOpts.annotation&&(t=r.default.dirname(r.default.resolve(t,this.mapOpts.annotation))),e=r.default.relative(t,e),"\\"===r.default.sep?e.replace(/\\/g,"/"):e},o.sourcePath=function(e){return this.mapOpts.from?this.mapOpts.from:this.relative(e.source.input.from)},o.generateString=function(){var e=this;this.css="",this.map=new t.default.SourceMapGenerator({file:this.outputFile()});var r,n,o=1,i=1;this.stringify(this.root,function(t,s,a){e.css+=t,s&&"end"!==a&&(s.source&&s.source.start?e.map.addMapping({source:e.sourcePath(s),generated:{line:o,column:i-1},original:{line:s.source.start.line,column:s.source.start.column-1}}):e.map.addMapping({source:"<no source>",original:{line:1,column:0},generated:{line:o,column:i-1}})),(r=t.match(/\n/g))?(o+=r.length,n=t.lastIndexOf("\n"),i=t.length-n):i+=t.length,s&&"start"!==a&&(s.source&&s.source.end?e.map.addMapping({source:e.sourcePath(s),generated:{line:o,column:i-1},original:{line:s.source.end.line,column:s.source.end.column}}):e.map.addMapping({source:"<no source>",original:{line:1,column:0},generated:{line:o,column:i-1}}))})},o.generate=function(){if(this.clearAnnotation(),this.isMap())return this.generateMap();var e="";return this.stringify(this.root,function(t){e+=t}),[e]},n}();Dt.default=o,Dt=Dt.default}).call(this,ae.Buffer);var qt={__esModule:!0,default:void 0},$t=function(){function e(e,t){if(void 0===t&&(t={}),this.type="warning",this.text=e,t.node&&t.node.source){var r=t.node.positionBy(t);this.line=r.line,this.column=r.column}for(var n in t)this[n]=t[n]}return e.prototype.toString=function(){return this.node?this.node.error(this.text,{plugin:this.plugin,index:this.index,word:this.word}).message:this.plugin?this.plugin+": "+this.text:this.text},e}();qt.default=$t,qt=qt.default;var Ht,Gt={__esModule:!0,default:void 0},Vt=(Ht=qt)&&Ht.__esModule?Ht:{default:Ht};function Wt(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var Jt=function(){function e(e,t,r){this.processor=e,this.messages=[],this.root=t,this.opts=r,this.css=void 0,this.map=void 0}var t,r,n=e.prototype;return n.toString=function(){return this.css},n.warn=function(e,t){void 0===t&&(t={}),t.plugin||this.lastPlugin&&this.lastPlugin.postcssPlugin&&(t.plugin=this.lastPlugin.postcssPlugin);var r=new Vt.default(e,t);return this.messages.push(r),r},n.warnings=function(){return this.messages.filter(function(e){return"warning"===e.type})},t=e,(r=[{key:"content",get:function(){return this.css}}])&&Wt(t.prototype,r),e}();Gt.default=Jt,Gt=Gt.default;var Zt={__esModule:!0,default:function(e){Yt[e]||(Yt[e]=!0,"undefined"!=typeof console&&console.warn&&console.warn(e))}},Yt={};Zt=Zt.default;var Xt={__esModule:!0,default:function(e,t){void 0===t&&(t={});var r,n,o,i,s,a,u,c,l,h,f,p,d,g,m=e.css.valueOf(),v=t.ignoreErrors,y=m.length,w=-1,b=1,_=0,A=[],k=[];function C(t){throw e.error("Unclosed "+t,b,_-w)}return{back:function(e){k.push(e)},nextToken:function(e){if(k.length)return k.pop();if(!(_>=y)){var t=!!e&&e.ignoreUnclosed;switch(((r=m.charCodeAt(_))===nr||r===ir||r===ar&&m.charCodeAt(_+1)!==nr)&&(w=_,b+=1),r){case nr:case or:case sr:case ar:case ir:n=_;do{n+=1,(r=m.charCodeAt(n))===nr&&(w=n,b+=1)}while(r===or||r===nr||r===sr||r===ar||r===ir);g=["space",m.slice(_,n)],_=n-1;break;case ur:case cr:case fr:case pr:case mr:case dr:case hr:var S=String.fromCharCode(r);g=[S,S,b,_-w];break;case lr:if(p=A.length?A.pop()[1]:"",d=m.charCodeAt(_+1),"url"===p&&d!==Kt&&d!==er&&d!==or&&d!==nr&&d!==sr&&d!==ir&&d!==ar){n=_;do{if(h=!1,-1===(n=m.indexOf(")",n+1))){if(v||t){n=_;break}C("bracket")}for(f=n;m.charCodeAt(f-1)===tr;)f-=1,h=!h}while(h);g=["brackets",m.slice(_,n+1),b,_-w,b,n-w],_=n}else n=m.indexOf(")",_+1),a=m.slice(_,n+1),-1===n||br.test(a)?g=["(","(",b,_-w]:(g=["brackets",a,b,_-w,b,n-w],_=n);break;case Kt:case er:o=r===Kt?"'":'"',n=_;do{if(h=!1,-1===(n=m.indexOf(o,n+1))){if(v||t){n=_+1;break}C("string")}for(f=n;m.charCodeAt(f-1)===tr;)f-=1,h=!h}while(h);a=m.slice(_,n+1),i=a.split("\n"),(s=i.length-1)>0?(c=b+s,l=n-i[s].length):(c=b,l=w),g=["string",m.slice(_,n+1),b,_-w,c,n-l],w=l,b=c,_=n;break;case vr:yr.lastIndex=_+1,yr.test(m),n=0===yr.lastIndex?m.length-1:yr.lastIndex-2,g=["at-word",m.slice(_,n+1),b,_-w,b,n-w],_=n;break;case tr:for(n=_,u=!0;m.charCodeAt(n+1)===tr;)n+=1,u=!u;if(r=m.charCodeAt(n+1),u&&r!==rr&&r!==or&&r!==nr&&r!==sr&&r!==ar&&r!==ir&&(n+=1,_r.test(m.charAt(n)))){for(;_r.test(m.charAt(n+1));)n+=1;m.charCodeAt(n+1)===or&&(n+=1)}g=["word",m.slice(_,n+1),b,_-w,b,n-w],_=n;break;default:r===rr&&m.charCodeAt(_+1)===gr?(0===(n=m.indexOf("*/",_+2)+1)&&(v||t?n=m.length:C("comment")),a=m.slice(_,n+1),i=a.split("\n"),(s=i.length-1)>0?(c=b+s,l=n-i[s].length):(c=b,l=w),g=["comment",a,b,_-w,c,n-l],w=l,b=c,_=n):(wr.lastIndex=_+1,wr.test(m),n=0===wr.lastIndex?m.length-1:wr.lastIndex-2,g=["word",m.slice(_,n+1),b,_-w,b,n-w],A.push(g),_=n)}return _++,g}},endOfFile:function(){return 0===k.length&&_>=y}}}},Kt="'".charCodeAt(0),er='"'.charCodeAt(0),tr="\\".charCodeAt(0),rr="/".charCodeAt(0),nr="\n".charCodeAt(0),or=" ".charCodeAt(0),ir="\f".charCodeAt(0),sr="\t".charCodeAt(0),ar="\r".charCodeAt(0),ur="[".charCodeAt(0),cr="]".charCodeAt(0),lr="(".charCodeAt(0),hr=")".charCodeAt(0),fr="{".charCodeAt(0),pr="}".charCodeAt(0),dr=";".charCodeAt(0),gr="*".charCodeAt(0),mr=":".charCodeAt(0),vr="@".charCodeAt(0),yr=/[ \n\t\r\f{}()'"\\;\/[\]#]/g,wr=/[ \n\t\r\f(){}:;@!'"\\\][#]|\/(?=\*)/g,br=/.[\\\/("'\n]/,_r=/[a-f0-9]/i;Xt=Xt.default;var Ar=function(e){function t(){return function(e,r){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.createTokenizer=function(){this.tokenizer=Xt(this.input,{ignoreErrors:!0})},t.prototype.comment=function(e){var t=new R;this.init(t,e[2],e[3]),t.source.end={line:e[4],column:e[5]};var r=e[1].slice(2);if("*/"===r.slice(-2)&&(r=r.slice(0,-2)),/^\s*$/.test(r))t.text="",t.raws.left=r,t.raws.right="";else{var n=r.match(/^(\s*)([^]*[^\s])(\s*)$/);t.text=n[2],t.raws.left=n[1],t.raws.right=n[3]}},t.prototype.decl=function(t){t.length>1&&e.prototype.decl.call(this,t)},t.prototype.unclosedBracket=function(){},t.prototype.unknownWord=function(e){this.spaces+=e.map(function(e){return e[1]}).join("")},t.prototype.unexpectedClose=function(){this.current.raws.after+="}"},t.prototype.doubleColon=function(){},t.prototype.unnamedAtrule=function(e){e.name=""},t.prototype.precheckMissedSemicolon=function(e){var t=this.colon(e);if(!1!==t){var r=void 0;for(r=t-1;r>=0&&"word"!==e[r][0];r--);for(r-=1;r>=0;r--)if("space"!==e[r][0]){r+=1;break}var n=e.splice(r,e.length-r);this.decl(n)}},t.prototype.checkMissedSemicolon=function(){},t.prototype.endFile=function(){for(this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.current.raws.after=(this.current.raws.after||"")+this.spaces;this.current.parent;)this.current=this.current.parent,this.current.raws.after=""},t}(t({})),kr=function(e,t){var r=new Pt(e,t),n=new Ar(r);return n.parse(),n.root},Cr={__esModule:!0,default:void 0};Cr.default={prefix:function(e){var t=e.match(/^(-\w+-)/);return t?t[0]:""},unprefixed:function(e){return e.replace(/^-\w+-/,"")}},Cr=Cr.default;var Sr={__esModule:!0,default:void 0},xr=Ur(T),Er=Ur(n({})),Mr=Ur(_),Or=Ur(R),Rr=Ur(i({})),Pr=Ur(Cr),Lr=Ur(u({})),Tr=Ur(Ft),Ir=Ur(a({})),zr=Ur(r({}));function Ur(e){return e&&e.__esModule?e:{default:e}}function jr(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return 1===t.length&&Array.isArray(t[0])&&(t=t[0]),new Er.default(t)}jr.plugin=function(e,t){function r(){var r=t.apply(void 0,arguments);return r.postcssPlugin=e,r.postcssVersion=(new Er.default).version,r}var n;return Object.defineProperty(r,"postcss",{get:function(){return n||(n=r()),n}}),r.process=function(e,t,n){return jr([r(n)]).process(e,t)},r},jr.stringify=Mr.default,jr.parse=Lr.default,jr.vendor=Pr.default,jr.list=Tr.default,jr.comment=function(e){return new Or.default(e)},jr.atRule=function(e){return new Rr.default(e)},jr.decl=function(e){return new xr.default(e)},jr.rule=function(e){return new Ir.default(e)},jr.root=function(e){return new zr.default(e)};var Br=jr;Sr.default=Br,Sr=Sr.default;var Fr={exports:{}};!function(e,t){"use strict";Fr.exports?Fr.exports=t():e.IPv6=t(e)}(this,function(e){"use strict";var t=e&&e.IPv6;return{best:function(e){var t,r,n=e.toLowerCase().split(":"),o=n.length,i=8;for(""===n[0]&&""===n[1]&&""===n[2]?(n.shift(),n.shift()):""===n[0]&&""===n[1]?n.shift():""===n[o-1]&&""===n[o-2]&&n.pop(),-1!==n[(o=n.length)-1].indexOf(".")&&(i=7),t=0;t<o&&""!==n[t];t++);if(t<i)for(n.splice(t,1,"0000");n.length<i;)n.splice(t,0,"0000");for(var s=0;s<i;s++){r=n[s].split("");for(var a=0;a<3&&"0"===r[0]&&r.length>1;a++)r.splice(0,1);n[s]=r.join("")}var u=-1,c=0,l=0,h=-1,f=!1;for(s=0;s<i;s++)f?"0"===n[s]?l+=1:(f=!1,l>c&&(u=h,c=l)):"0"===n[s]&&(f=!0,h=s,l=1);l>c&&(u=h,c=l),c>1&&n.splice(u,c,""),o=n.length;var p="";for(""===n[0]&&(p=":"),s=0;s<o&&(p+=n[s],s!==o-1);s++)p+=":";return""===n[o-1]&&(p+=":"),p},noConflict:function(){return e.IPv6===this&&(e.IPv6=t),this}}}),Fr=Fr.exports;var Qr={exports:{}};!function(e,t){"use strict";Qr.exports?Qr.exports=t():e.SecondLevelDomains=t(e)}(this,function(e){"use strict";var t=e&&e.SecondLevelDomains,r={list:{ac:" com gov mil net org ",ae:" ac co gov mil name net org pro sch ",af:" com edu gov net org ",al:" com edu gov mil net org ",ao:" co ed gv it og pb ",ar:" com edu gob gov int mil net org tur ",at:" ac co gv or ",au:" asn com csiro edu gov id net org ",ba:" co com edu gov mil net org rs unbi unmo unsa untz unze ",bb:" biz co com edu gov info net org store tv ",bh:" biz cc com edu gov info net org ",bn:" com edu gov net org ",bo:" com edu gob gov int mil net org tv ",br:" adm adv agr am arq art ato b bio blog bmd cim cng cnt com coop ecn edu eng esp etc eti far flog fm fnd fot fst g12 ggf gov imb ind inf jor jus lel mat med mil mus net nom not ntr odo org ppg pro psc psi qsl rec slg srv tmp trd tur tv vet vlog wiki zlg ",bs:" com edu gov net org ",bz:" du et om ov rg ",ca:" ab bc mb nb nf nl ns nt nu on pe qc sk yk ",ck:" biz co edu gen gov info net org ",cn:" ac ah bj com cq edu fj gd gov gs gx gz ha hb he hi hl hn jl js jx ln mil net nm nx org qh sc sd sh sn sx tj tw xj xz yn zj ",co:" com edu gov mil net nom org ",cr:" ac c co ed fi go or sa ",cy:" ac biz com ekloges gov ltd name net org parliament press pro tm ",do:" art com edu gob gov mil net org sld web ",dz:" art asso com edu gov net org pol ",ec:" com edu fin gov info med mil net org pro ",eg:" com edu eun gov mil name net org sci ",er:" com edu gov ind mil net org rochest w ",es:" com edu gob nom org ",et:" biz com edu gov info name net org ",fj:" ac biz com info mil name net org pro ",fk:" ac co gov net nom org ",fr:" asso com f gouv nom prd presse tm ",gg:" co net org ",gh:" com edu gov mil org ",gn:" ac com gov net org ",gr:" com edu gov mil net org ",gt:" com edu gob ind mil net org ",gu:" com edu gov net org ",hk:" com edu gov idv net org ",hu:" 2000 agrar bolt casino city co erotica erotika film forum games hotel info ingatlan jogasz konyvelo lakas media news org priv reklam sex shop sport suli szex tm tozsde utazas video ",id:" ac co go mil net or sch web ",il:" ac co gov idf k12 muni net org ",in:" ac co edu ernet firm gen gov i ind mil net nic org res ",iq:" com edu gov i mil net org ",ir:" ac co dnssec gov i id net org sch ",it:" edu gov ",je:" co net org ",jo:" com edu gov mil name net org sch ",jp:" ac ad co ed go gr lg ne or ",ke:" ac co go info me mobi ne or sc ",kh:" com edu gov mil net org per ",ki:" biz com de edu gov info mob net org tel ",km:" asso com coop edu gouv k medecin mil nom notaires pharmaciens presse tm veterinaire ",kn:" edu gov net org ",kr:" ac busan chungbuk chungnam co daegu daejeon es gangwon go gwangju gyeongbuk gyeonggi gyeongnam hs incheon jeju jeonbuk jeonnam k kg mil ms ne or pe re sc seoul ulsan ",kw:" com edu gov net org ",ky:" com edu gov net org ",kz:" com edu gov mil net org ",lb:" com edu gov net org ",lk:" assn com edu gov grp hotel int ltd net ngo org sch soc web ",lr:" com edu gov net org ",lv:" asn com conf edu gov id mil net org ",ly:" com edu gov id med net org plc sch ",ma:" ac co gov m net org press ",mc:" asso tm ",me:" ac co edu gov its net org priv ",mg:" com edu gov mil nom org prd tm ",mk:" com edu gov inf name net org pro ",ml:" com edu gov net org presse ",mn:" edu gov org ",mo:" com edu gov net org ",mt:" com edu gov net org ",mv:" aero biz com coop edu gov info int mil museum name net org pro ",mw:" ac co com coop edu gov int museum net org ",mx:" com edu gob net org ",my:" com edu gov mil name net org sch ",nf:" arts com firm info net other per rec store web ",ng:" biz com edu gov mil mobi name net org sch ",ni:" ac co com edu gob mil net nom org ",np:" com edu gov mil net org ",nr:" biz com edu gov info net org ",om:" ac biz co com edu gov med mil museum net org pro sch ",pe:" com edu gob mil net nom org sld ",ph:" com edu gov i mil net ngo org ",pk:" biz com edu fam gob gok gon gop gos gov net org web ",pl:" art bialystok biz com edu gda gdansk gorzow gov info katowice krakow lodz lublin mil net ngo olsztyn org poznan pwr radom slupsk szczecin torun warszawa waw wroc wroclaw zgora ",pr:" ac biz com edu est gov info isla name net org pro prof ",ps:" com edu gov net org plo sec ",pw:" belau co ed go ne or ",ro:" arts com firm info nom nt org rec store tm www ",rs:" ac co edu gov in org ",sb:" com edu gov net org ",sc:" com edu gov net org ",sh:" co com edu gov net nom org ",sl:" com edu gov net org ",st:" co com consulado edu embaixada gov mil net org principe saotome store ",sv:" com edu gob org red ",sz:" ac co org ",tr:" av bbs bel biz com dr edu gen gov info k12 name net org pol tel tsk tv web ",tt:" aero biz cat co com coop edu gov info int jobs mil mobi museum name net org pro tel travel ",tw:" club com ebiz edu game gov idv mil net org ",mu:" ac co com gov net or org ",mz:" ac co edu gov org ",na:" co com ",nz:" ac co cri geek gen govt health iwi maori mil net org parliament school ",pa:" abo ac com edu gob ing med net nom org sld ",pt:" com edu gov int net nome org publ ",py:" com edu gov mil net org ",qa:" com edu gov mil net org ",re:" asso com nom ",ru:" ac adygeya altai amur arkhangelsk astrakhan bashkiria belgorod bir bryansk buryatia cbg chel chelyabinsk chita chukotka chuvashia com dagestan e-burg edu gov grozny int irkutsk ivanovo izhevsk jar joshkar-ola kalmykia kaluga kamchatka karelia kazan kchr kemerovo khabarovsk khakassia khv kirov koenig komi kostroma kranoyarsk kuban kurgan kursk lipetsk magadan mari mari-el marine mil mordovia mosreg msk murmansk nalchik net nnov nov novosibirsk nsk omsk orenburg org oryol penza perm pp pskov ptz rnd ryazan sakhalin samara saratov simbirsk smolensk spb stavropol stv surgut tambov tatarstan tom tomsk tsaritsyn tsk tula tuva tver tyumen udm udmurtia ulan-ude vladikavkaz vladimir vladivostok volgograd vologda voronezh vrn vyatka yakutia yamal yekaterinburg yuzhno-sakhalinsk ",rw:" ac co com edu gouv gov int mil net ",sa:" com edu gov med net org pub sch ",sd:" com edu gov info med net org tv ",se:" a ac b bd c d e f g h i k l m n o org p parti pp press r s t tm u w x y z ",sg:" com edu gov idn net org per ",sn:" art com edu gouv org perso univ ",sy:" com edu gov mil net news org ",th:" ac co go in mi net or ",tj:" ac biz co com edu go gov info int mil name net nic org test web ",tn:" agrinet com defense edunet ens fin gov ind info intl mincom nat net org perso rnrt rns rnu tourism ",tz:" ac co go ne or ",ua:" biz cherkassy chernigov chernovtsy ck cn co com crimea cv dn dnepropetrovsk donetsk dp edu gov if in ivano-frankivsk kh kharkov kherson khmelnitskiy kiev kirovograd km kr ks kv lg lugansk lutsk lviv me mk net nikolaev od odessa org pl poltava pp rovno rv sebastopol sumy te ternopil uzhgorod vinnica vn zaporizhzhe zhitomir zp zt ",ug:" ac co go ne or org sc ",uk:" ac bl british-library co cym gov govt icnet jet lea ltd me mil mod national-library-scotland nel net nhs nic nls org orgn parliament plc police sch scot soc ",us:" dni fed isa kids nsn ",uy:" com edu gub mil net org ",ve:" co com edu gob info mil net org web ",vi:" co com k12 net org ",vn:" ac biz com edu gov health info int name net org pro ",ye:" co com gov ltd me net org plc ",yu:" ac co edu gov org ",za:" ac agric alt bourse city co cybernet db edu gov grondar iaccess imt inca landesign law mil net ngo nis nom olivetti org pix school tm web ",zm:" ac co com edu gov net org sch ",com:"ar br cn de eu gb gr hu jpn kr no qc ru sa se uk us uy za ",net:"gb jp se uk ",org:"ae",de:"com "},has:function(e){var t=e.lastIndexOf(".");if(t<=0||t>=e.length-1)return!1;var n=e.lastIndexOf(".",t-1);if(n<=0||n>=t-1)return!1;var o=r.list[e.slice(t+1)];return!!o&&o.indexOf(" "+e.slice(n+1,t)+" ")>=0},is:function(e){var t=e.lastIndexOf(".");if(t<=0||t>=e.length-1)return!1;if(e.lastIndexOf(".",t-1)>=0)return!1;var n=r.list[e.slice(t+1)];return!!n&&n.indexOf(" "+e.slice(0,t)+" ")>=0},get:function(e){var t=e.lastIndexOf(".");if(t<=0||t>=e.length-1)return null;var n=e.lastIndexOf(".",t-1);if(n<=0||n>=t-1)return null;var o=r.list[e.slice(t+1)];return o?o.indexOf(" "+e.slice(n+1,t)+" ")<0?null:e.slice(n+1):null},noConflict:function(){return e.SecondLevelDomains===this&&(e.SecondLevelDomains=t),this}};return r}),Qr=Qr.exports;var Nr={exports:{}};(function(e){!function(t){var r="object"==typeof Nr.exports&&Nr.exports&&!Nr.exports.nodeType&&Nr.exports,n=Nr&&!Nr.nodeType&&Nr,o="object"==typeof e&&e;o.global!==o&&o.window!==o&&o.self!==o||(t=o);var i,s,a=2147483647,u=36,c=1,l=26,h=38,f=700,p=72,d=128,g="-",m=/^xn--/,v=/[^\x20-\x7E]/,y=/[\x2E\u3002\uFF0E\uFF61]/g,w={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},b=u-c,_=Math.floor,A=String.fromCharCode;function k(e){throw new RangeError(w[e])}function C(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function S(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+C((e=e.replace(y,".")).split("."),t).join(".")}function x(e){for(var t,r,n=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function E(e){return C(e,function(e){var t="";return e>65535&&(t+=A((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+A(e)}).join("")}function M(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function O(e,t,r){var n=0;for(e=r?_(e/f):e>>1,e+=_(e/t);e>b*l>>1;n+=u)e=_(e/b);return _(n+(b+1)*e/(e+h))}function R(e){var t,r,n,o,i,s,h,f,m,v,y,w=[],b=e.length,A=0,C=d,S=p;for((r=e.lastIndexOf(g))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&k("not-basic"),w.push(e.charCodeAt(n));for(o=r>0?r+1:0;o<b;){for(i=A,s=1,h=u;o>=b&&k("invalid-input"),((f=(y=e.charCodeAt(o++))-48<10?y-22:y-65<26?y-65:y-97<26?y-97:u)>=u||f>_((a-A)/s))&&k("overflow"),A+=f*s,!(f<(m=h<=S?c:h>=S+l?l:h-S));h+=u)s>_(a/(v=u-m))&&k("overflow"),s*=v;S=O(A-i,t=w.length+1,0==i),_(A/t)>a-C&&k("overflow"),C+=_(A/t),A%=t,w.splice(A++,0,C)}return E(w)}function P(e){var t,r,n,o,i,s,h,f,m,v,y,w,b,C,S,E=[];for(w=(e=x(e)).length,t=d,r=0,i=p,s=0;s<w;++s)(y=e[s])<128&&E.push(A(y));for(n=o=E.length,o&&E.push(g);n<w;){for(h=a,s=0;s<w;++s)(y=e[s])>=t&&y<h&&(h=y);for(h-t>_((a-r)/(b=n+1))&&k("overflow"),r+=(h-t)*b,t=h,s=0;s<w;++s)if((y=e[s])<t&&++r>a&&k("overflow"),y==t){for(f=r,m=u;!(f<(v=m<=i?c:m>=i+l?l:m-i));m+=u)S=f-v,C=u-v,E.push(A(M(v+S%C,0))),f=_(S/C);E.push(A(M(f,0))),i=O(r,b,n==o),r=0,++n}++r,++t}return E.join("")}if(i={version:"1.3.2",ucs2:{decode:x,encode:E},decode:R,encode:P,toASCII:function(e){return S(e,function(e){return v.test(e)?"xn--"+P(e):e})},toUnicode:function(e){return S(e,function(e){return m.test(e)?R(e.slice(4).toLowerCase()):e})}},r&&n)if(Nr.exports==r)n.exports=i;else for(s in i)i.hasOwnProperty(s)&&(r[s]=i[s]);else t.punycode=i}(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{}),Nr=Nr.exports;var Dr={exports:{}};!function(e,t){"use strict";Dr.exports?Dr.exports=t(Nr,Fr,Qr):e.URI=t(e.punycode,e.IPv6,e.SecondLevelDomains,e)}(this,function(e,t,r,n){"use strict";var o=n&&n.URI;function i(e,t){var r=arguments.length>=1,n=arguments.length>=2;if(!(this instanceof i))return r?n?new i(e,t):new i(e):new i;if(void 0===e){if(r)throw new TypeError("undefined is not a valid argument for URI");e="undefined"!=typeof location?location.href+"":""}if(null===e&&r)throw new TypeError("null is not a valid argument for URI");return this.href(e),void 0!==t?this.absoluteTo(t):this}i.version="1.19.1";var s=i.prototype,a=Object.prototype.hasOwnProperty;function u(e){return e.replace(/([.*+?^=!:${}()|[\]\/\\])/g,"\\$1")}function c(e){return void 0===e?"Undefined":String(Object.prototype.toString.call(e)).slice(8,-1)}function l(e){return"Array"===c(e)}function h(e,t){var r,n,o={};if("RegExp"===c(t))o=null;else if(l(t))for(r=0,n=t.length;r<n;r++)o[t[r]]=!0;else o[t]=!0;for(r=0,n=e.length;r<n;r++)(o&&void 0!==o[e[r]]||!o&&t.test(e[r]))&&(e.splice(r,1),n--,r--);return e}function f(e,t){var r,n;if(l(t)){for(r=0,n=t.length;r<n;r++)if(!f(e,t[r]))return!1;return!0}var o=c(t);for(r=0,n=e.length;r<n;r++)if("RegExp"===o){if("string"==typeof e[r]&&e[r].match(t))return!0}else if(e[r]===t)return!0;return!1}function p(e,t){if(!l(e)||!l(t))return!1;if(e.length!==t.length)return!1;e.sort(),t.sort();for(var r=0,n=e.length;r<n;r++)if(e[r]!==t[r])return!1;return!0}function d(e){return e.replace(/^\/+|\/+$/g,"")}function g(e){return escape(e)}function m(e){return encodeURIComponent(e).replace(/[!'()*]/g,g).replace(/\*/g,"%2A")}i._parts=function(){return{protocol:null,username:null,password:null,hostname:null,urn:null,port:null,path:null,query:null,fragment:null,preventInvalidHostname:i.preventInvalidHostname,duplicateQueryParameters:i.duplicateQueryParameters,escapeQuerySpace:i.escapeQuerySpace}},i.preventInvalidHostname=!1,i.duplicateQueryParameters=!1,i.escapeQuerySpace=!0,i.protocol_expression=/^[a-z][a-z0-9.+-]*$/i,i.idn_expression=/[^a-z0-9\._-]/i,i.punycode_expression=/(xn--)/i,i.ip4_expression=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,i.ip6_expression=/^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,i.find_uri_expression=/\b((?:[a-z][\w-]+:(?:\/{1,3}|[a-z0-9%])|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}\/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'".,<>?\xab\xbb\u201c\u201d\u2018\u2019]))/gi,i.findUri={start:/\b(?:([a-z][a-z0-9.+-]*:\/\/)|www\.)/gi,end:/[\s\r\n]|$/,trim:/[`!()\[\]{};:'".,<>?\xab\xbb\u201c\u201d\u201e\u2018\u2019]+$/,parens:/(\([^\)]*\)|\[[^\]]*\]|\{[^}]*\}|<[^>]*>)/g},i.defaultPorts={http:"80",https:"443",ftp:"21",gopher:"70",ws:"80",wss:"443"},i.hostProtocols=["http","https"],i.invalid_hostname_characters=/[^a-zA-Z0-9\.\-:_]/,i.domAttributes={a:"href",blockquote:"cite",link:"href",base:"href",script:"src",form:"action",img:"src",area:"href",iframe:"src",embed:"src",source:"src",track:"src",input:"src",audio:"src",video:"src"},i.getDomAttribute=function(e){if(e&&e.nodeName){var t=e.nodeName.toLowerCase();if("input"!==t||"image"===e.type)return i.domAttributes[t]}},i.encode=m,i.decode=decodeURIComponent,i.iso8859=function(){i.encode=escape,i.decode=unescape},i.unicode=function(){i.encode=m,i.decode=decodeURIComponent},i.characters={pathname:{encode:{expression:/%(24|26|2B|2C|3B|3D|3A|40)/gi,map:{"%24":"$","%26":"&","%2B":"+","%2C":",","%3B":";","%3D":"=","%3A":":","%40":"@"}},decode:{expression:/[\/\?#]/g,map:{"/":"%2F","?":"%3F","#":"%23"}}},reserved:{encode:{expression:/%(21|23|24|26|27|28|29|2A|2B|2C|2F|3A|3B|3D|3F|40|5B|5D)/gi,map:{"%3A":":","%2F":"/","%3F":"?","%23":"#","%5B":"[","%5D":"]","%40":"@","%21":"!","%24":"$","%26":"&","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"="}}},urnpath:{encode:{expression:/%(21|24|27|28|29|2A|2B|2C|3B|3D|40)/gi,map:{"%21":"!","%24":"$","%27":"'","%28":"(","%29":")","%2A":"*","%2B":"+","%2C":",","%3B":";","%3D":"=","%40":"@"}},decode:{expression:/[\/\?#:]/g,map:{"/":"%2F","?":"%3F","#":"%23",":":"%3A"}}}},i.encodeQuery=function(e,t){var r=i.encode(e+"");return void 0===t&&(t=i.escapeQuerySpace),t?r.replace(/%20/g,"+"):r},i.decodeQuery=function(e,t){e+="",void 0===t&&(t=i.escapeQuerySpace);try{return i.decode(t?e.replace(/\+/g,"%20"):e)}catch(r){return e}};var v,y={encode:"encode",decode:"decode"},w=function(e,t){return function(r){try{return i[t](r+"").replace(i.characters[e][t].expression,function(r){return i.characters[e][t].map[r]})}catch(n){return r}}};for(v in y)i[v+"PathSegment"]=w("pathname",y[v]),i[v+"UrnPathSegment"]=w("urnpath",y[v]);var b=function(e,t,r){return function(n){var o;o=r?function(e){return i[t](i[r](e))}:i[t];for(var s=(n+"").split(e),a=0,u=s.length;a<u;a++)s[a]=o(s[a]);return s.join(e)}};function _(e){return function(t,r){return void 0===t?this._parts[e]||"":(this._parts[e]=t||null,this.build(!r),this)}}function A(e,t){return function(r,n){return void 0===r?this._parts[e]||"":(null!==r&&(r+="").charAt(0)===t&&(r=r.substring(1)),this._parts[e]=r,this.build(!n),this)}}i.decodePath=b("/","decodePathSegment"),i.decodeUrnPath=b(":","decodeUrnPathSegment"),i.recodePath=b("/","encodePathSegment","decode"),i.recodeUrnPath=b(":","encodeUrnPathSegment","decode"),i.encodeReserved=w("reserved","encode"),i.parse=function(e,t){var r;return t||(t={preventInvalidHostname:i.preventInvalidHostname}),(r=e.indexOf("#"))>-1&&(t.fragment=e.substring(r+1)||null,e=e.substring(0,r)),(r=e.indexOf("?"))>-1&&(t.query=e.substring(r+1)||null,e=e.substring(0,r)),"//"===e.substring(0,2)?(t.protocol=null,e=e.substring(2),e=i.parseAuthority(e,t)):(r=e.indexOf(":"))>-1&&(t.protocol=e.substring(0,r)||null,t.protocol&&!t.protocol.match(i.protocol_expression)?t.protocol=void 0:"//"===e.substring(r+1,r+3)?(e=e.substring(r+3),e=i.parseAuthority(e,t)):(e=e.substring(r+1),t.urn=!0)),t.path=e,t},i.parseHost=function(e,t){e||(e="");var r,n,o=(e=e.replace(/\\/g,"/")).indexOf("/");if(-1===o&&(o=e.length),"["===e.charAt(0))r=e.indexOf("]"),t.hostname=e.substring(1,r)||null,t.port=e.substring(r+2,o)||null,"/"===t.port&&(t.port=null);else{var s=e.indexOf(":"),a=e.indexOf("/"),u=e.indexOf(":",s+1);-1!==u&&(-1===a||u<a)?(t.hostname=e.substring(0,o)||null,t.port=null):(n=e.substring(0,o).split(":"),t.hostname=n[0]||null,t.port=n[1]||null)}return t.hostname&&"/"!==e.substring(o).charAt(0)&&(o++,e="/"+e),t.preventInvalidHostname&&i.ensureValidHostname(t.hostname,t.protocol),t.port&&i.ensureValidPort(t.port),e.substring(o)||"/"},i.parseAuthority=function(e,t){return e=i.parseUserinfo(e,t),i.parseHost(e,t)},i.parseUserinfo=function(e,t){var r,n=e.indexOf("/"),o=e.lastIndexOf("@",n>-1?n:e.length-1);return o>-1&&(-1===n||o<n)?(r=e.substring(0,o).split(":"),t.username=r[0]?i.decode(r[0]):null,r.shift(),t.password=r[0]?i.decode(r.join(":")):null,e=e.substring(o+1)):(t.username=null,t.password=null),e},i.parseQuery=function(e,t){if(!e)return{};if(!(e=e.replace(/&+/g,"&").replace(/^\?*&*|&+$/g,"")))return{};for(var r,n,o,s={},u=e.split("&"),c=u.length,l=0;l<c;l++)r=u[l].split("="),n=i.decodeQuery(r.shift(),t),o=r.length?i.decodeQuery(r.join("="),t):null,a.call(s,n)?("string"!=typeof s[n]&&null!==s[n]||(s[n]=[s[n]]),s[n].push(o)):s[n]=o;return s},i.build=function(e){var t="";return e.protocol&&(t+=e.protocol+":"),e.urn||!t&&!e.hostname||(t+="//"),t+=i.buildAuthority(e)||"","string"==typeof e.path&&("/"!==e.path.charAt(0)&&"string"==typeof e.hostname&&(t+="/"),t+=e.path),"string"==typeof e.query&&e.query&&(t+="?"+e.query),"string"==typeof e.fragment&&e.fragment&&(t+="#"+e.fragment),t},i.buildHost=function(e){var t="";return e.hostname?(i.ip6_expression.test(e.hostname)?t+="["+e.hostname+"]":t+=e.hostname,e.port&&(t+=":"+e.port),t):""},i.buildAuthority=function(e){return i.buildUserinfo(e)+i.buildHost(e)},i.buildUserinfo=function(e){var t="";return e.username&&(t+=i.encode(e.username)),e.password&&(t+=":"+i.encode(e.password)),t&&(t+="@"),t},i.buildQuery=function(e,t,r){var n,o,s,u,c="";for(o in e)if(a.call(e,o)&&o)if(l(e[o]))for(n={},s=0,u=e[o].length;s<u;s++)void 0!==e[o][s]&&void 0===n[e[o][s]+""]&&(c+="&"+i.buildQueryParameter(o,e[o][s],r),!0!==t&&(n[e[o][s]+""]=!0));else void 0!==e[o]&&(c+="&"+i.buildQueryParameter(o,e[o],r));return c.substring(1)},i.buildQueryParameter=function(e,t,r){return i.encodeQuery(e,r)+(null!==t?"="+i.encodeQuery(t,r):"")},i.addQuery=function(e,t,r){if("object"==typeof t)for(var n in t)a.call(t,n)&&i.addQuery(e,n,t[n]);else{if("string"!=typeof t)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");if(void 0===e[t])return void(e[t]=r);"string"==typeof e[t]&&(e[t]=[e[t]]),l(r)||(r=[r]),e[t]=(e[t]||[]).concat(r)}},i.setQuery=function(e,t,r){if("object"==typeof t)for(var n in t)a.call(t,n)&&i.setQuery(e,n,t[n]);else{if("string"!=typeof t)throw new TypeError("URI.setQuery() accepts an object, string as the name parameter");e[t]=void 0===r?null:r}},i.removeQuery=function(e,t,r){var n,o,s;if(l(t))for(n=0,o=t.length;n<o;n++)e[t[n]]=void 0;else if("RegExp"===c(t))for(s in e)t.test(s)&&(e[s]=void 0);else if("object"==typeof t)for(s in t)a.call(t,s)&&i.removeQuery(e,s,t[s]);else{if("string"!=typeof t)throw new TypeError("URI.removeQuery() accepts an object, string, RegExp as the first parameter");void 0!==r?"RegExp"===c(r)?!l(e[t])&&r.test(e[t])?e[t]=void 0:e[t]=h(e[t],r):e[t]!==String(r)||l(r)&&1!==r.length?l(e[t])&&(e[t]=h(e[t],r)):e[t]=void 0:e[t]=void 0}},i.hasQuery=function(e,t,r,n){switch(c(t)){case"String":break;case"RegExp":for(var o in e)if(a.call(e,o)&&t.test(o)&&(void 0===r||i.hasQuery(e,o,r)))return!0;return!1;case"Object":for(var s in t)if(a.call(t,s)&&!i.hasQuery(e,s,t[s]))return!1;return!0;default:throw new TypeError("URI.hasQuery() accepts a string, regular expression or object as the name parameter")}switch(c(r)){case"Undefined":return t in e;case"Boolean":return r===Boolean(l(e[t])?e[t].length:e[t]);case"Function":return!!r(e[t],t,e);case"Array":return!!l(e[t])&&(n?f:p)(e[t],r);case"RegExp":return l(e[t])?!!n&&f(e[t],r):Boolean(e[t]&&e[t].match(r));case"Number":r=String(r);case"String":return l(e[t])?!!n&&f(e[t],r):e[t]===r;default:throw new TypeError("URI.hasQuery() accepts undefined, boolean, string, number, RegExp, Function as the value parameter")}},i.joinPaths=function(){for(var e=[],t=[],r=0,n=0;n<arguments.length;n++){var o=new i(arguments[n]);e.push(o);for(var s=o.segment(),a=0;a<s.length;a++)"string"==typeof s[a]&&t.push(s[a]),s[a]&&r++}if(!t.length||!r)return new i("");var u=new i("").segment(t);return""!==e[0].path()&&"/"!==e[0].path().slice(0,1)||u.path("/"+u.path()),u.normalize()},i.commonPath=function(e,t){var r,n=Math.min(e.length,t.length);for(r=0;r<n;r++)if(e.charAt(r)!==t.charAt(r)){r--;break}return r<1?e.charAt(0)===t.charAt(0)&&"/"===e.charAt(0)?"/":"":("/"===e.charAt(r)&&"/"===t.charAt(r)||(r=e.substring(0,r).lastIndexOf("/")),e.substring(0,r+1))},i.withinString=function(e,t,r){r||(r={});var n=r.start||i.findUri.start,o=r.end||i.findUri.end,s=r.trim||i.findUri.trim,a=r.parens||i.findUri.parens,u=/[a-z0-9-]=["']?$/i;for(n.lastIndex=0;;){var c=n.exec(e);if(!c)break;var l=c.index;if(r.ignoreHtml){var h=e.slice(Math.max(l-3,0),l);if(h&&u.test(h))continue}for(var f=l+e.slice(l).search(o),p=e.slice(l,f),d=-1;;){var g=a.exec(p);if(!g)break;var m=g.index+g[0].length;d=Math.max(d,m)}if(!((p=d>-1?p.slice(0,d)+p.slice(d).replace(s,""):p.replace(s,"")).length<=c[0].length||r.ignore&&r.ignore.test(p))){var v=t(p,l,f=l+p.length,e);void 0!==v?(v=String(v),e=e.slice(0,l)+v+e.slice(f),n.lastIndex=l+v.length):n.lastIndex=f}}return n.lastIndex=0,e},i.ensureValidHostname=function(t,r){var n=!!t,o=!1;if(!!r&&(o=f(i.hostProtocols,r)),o&&!n)throw new TypeError("Hostname cannot be empty, if protocol is "+r);if(t&&t.match(i.invalid_hostname_characters)){if(!e)throw new TypeError('Hostname "'+t+'" contains characters other than [A-Z0-9.-:_] and Punycode.js is not available');if(e.toASCII(t).match(i.invalid_hostname_characters))throw new TypeError('Hostname "'+t+'" contains characters other than [A-Z0-9.-:_]')}},i.ensureValidPort=function(e){if(e){var t=Number(e);if(!(/^[0-9]+$/.test(t)&&t>0&&t<65536))throw new TypeError('Port "'+e+'" is not a valid port')}},i.noConflict=function(e){if(e){var t={URI:this.noConflict()};return n.URITemplate&&"function"==typeof n.URITemplate.noConflict&&(t.URITemplate=n.URITemplate.noConflict()),n.IPv6&&"function"==typeof n.IPv6.noConflict&&(t.IPv6=n.IPv6.noConflict()),n.SecondLevelDomains&&"function"==typeof n.SecondLevelDomains.noConflict&&(t.SecondLevelDomains=n.SecondLevelDomains.noConflict()),t}return n.URI===this&&(n.URI=o),this},s.build=function(e){return!0===e?this._deferred_build=!0:(void 0===e||this._deferred_build)&&(this._string=i.build(this._parts),this._deferred_build=!1),this},s.clone=function(){return new i(this)},s.valueOf=s.toString=function(){return this.build(!1)._string},s.protocol=_("protocol"),s.username=_("username"),s.password=_("password"),s.hostname=_("hostname"),s.port=_("port"),s.query=A("query","?"),s.fragment=A("fragment","#"),s.search=function(e,t){var r=this.query(e,t);return"string"==typeof r&&r.length?"?"+r:r},s.hash=function(e,t){var r=this.fragment(e,t);return"string"==typeof r&&r.length?"#"+r:r},s.pathname=function(e,t){if(void 0===e||!0===e){var r=this._parts.path||(this._parts.hostname?"/":"");return e?(this._parts.urn?i.decodeUrnPath:i.decodePath)(r):r}return this._parts.urn?this._parts.path=e?i.recodeUrnPath(e):"":this._parts.path=e?i.recodePath(e):"/",this.build(!t),this},s.path=s.pathname,s.href=function(e,t){var r;if(void 0===e)return this.toString();this._string="",this._parts=i._parts();var n=e instanceof i,o="object"==typeof e&&(e.hostname||e.path||e.pathname);if(e.nodeName&&(e=e[i.getDomAttribute(e)]||"",o=!1),!n&&o&&void 0!==e.pathname&&(e=e.toString()),"string"==typeof e||e instanceof String)this._parts=i.parse(String(e),this._parts);else{if(!n&&!o)throw new TypeError("invalid input");var s=n?e._parts:e;for(r in s)"query"!==r&&a.call(this._parts,r)&&(this._parts[r]=s[r]);s.query&&this.query(s.query,!1)}return this.build(!t),this},s.is=function(e){var t=!1,n=!1,o=!1,s=!1,a=!1,u=!1,c=!1,l=!this._parts.urn;switch(this._parts.hostname&&(l=!1,n=i.ip4_expression.test(this._parts.hostname),o=i.ip6_expression.test(this._parts.hostname),a=(s=!(t=n||o))&&r&&r.has(this._parts.hostname),u=s&&i.idn_expression.test(this._parts.hostname),c=s&&i.punycode_expression.test(this._parts.hostname)),e.toLowerCase()){case"relative":return l;case"absolute":return!l;case"domain":case"name":return s;case"sld":return a;case"ip":return t;case"ip4":case"ipv4":case"inet4":return n;case"ip6":case"ipv6":case"inet6":return o;case"idn":return u;case"url":return!this._parts.urn;case"urn":return!!this._parts.urn;case"punycode":return c}return null};var k=s.protocol,C=s.port,S=s.hostname;s.protocol=function(e,t){if(e&&!(e=e.replace(/:(\/\/)?$/,"")).match(i.protocol_expression))throw new TypeError('Protocol "'+e+"\" contains characters other than [A-Z0-9.+-] or doesn't start with [A-Z]");return k.call(this,e,t)},s.scheme=s.protocol,s.port=function(e,t){return this._parts.urn?void 0===e?"":this:(void 0!==e&&(0===e&&(e=null),e&&(":"===(e+="").charAt(0)&&(e=e.substring(1)),i.ensureValidPort(e))),C.call(this,e,t))},s.hostname=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0!==e){var r={preventInvalidHostname:this._parts.preventInvalidHostname};if("/"!==i.parseHost(e,r))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');e=r.hostname,this._parts.preventInvalidHostname&&i.ensureValidHostname(e,this._parts.protocol)}return S.call(this,e,t)},s.origin=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){var r=this.protocol();return this.authority()?(r?r+"://":"")+this.authority():""}var n=i(e);return this.protocol(n.protocol()).authority(n.authority()).build(!t),this},s.host=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e)return this._parts.hostname?i.buildHost(this._parts):"";if("/"!==i.parseHost(e,this._parts))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');return this.build(!t),this},s.authority=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e)return this._parts.hostname?i.buildAuthority(this._parts):"";if("/"!==i.parseAuthority(e,this._parts))throw new TypeError('Hostname "'+e+'" contains characters other than [A-Z0-9.-]');return this.build(!t),this},s.userinfo=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){var r=i.buildUserinfo(this._parts);return r?r.substring(0,r.length-1):r}return"@"!==e[e.length-1]&&(e+="@"),i.parseUserinfo(e,this._parts),this.build(!t),this},s.resource=function(e,t){var r;return void 0===e?this.path()+this.search()+this.hash():(r=i.parse(e),this._parts.path=r.path,this._parts.query=r.query,this._parts.fragment=r.fragment,this.build(!t),this)},s.subdomain=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var r=this._parts.hostname.length-this.domain().length-1;return this._parts.hostname.substring(0,r)||""}var n=this._parts.hostname.length-this.domain().length,o=this._parts.hostname.substring(0,n),s=new RegExp("^"+u(o));if(e&&"."!==e.charAt(e.length-1)&&(e+="."),-1!==e.indexOf(":"))throw new TypeError("Domains cannot contain colons");return e&&i.ensureValidHostname(e,this._parts.protocol),this._parts.hostname=this._parts.hostname.replace(s,e),this.build(!t),this},s.domain=function(e,t){if(this._parts.urn)return void 0===e?"":this;if("boolean"==typeof e&&(t=e,e=void 0),void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var r=this._parts.hostname.match(/\./g);if(r&&r.length<2)return this._parts.hostname;var n=this._parts.hostname.length-this.tld(t).length-1;return n=this._parts.hostname.lastIndexOf(".",n-1)+1,this._parts.hostname.substring(n)||""}if(!e)throw new TypeError("cannot set domain empty");if(-1!==e.indexOf(":"))throw new TypeError("Domains cannot contain colons");if(i.ensureValidHostname(e,this._parts.protocol),!this._parts.hostname||this.is("IP"))this._parts.hostname=e;else{var o=new RegExp(u(this.domain())+"$");this._parts.hostname=this._parts.hostname.replace(o,e)}return this.build(!t),this},s.tld=function(e,t){if(this._parts.urn)return void 0===e?"":this;if("boolean"==typeof e&&(t=e,e=void 0),void 0===e){if(!this._parts.hostname||this.is("IP"))return"";var n=this._parts.hostname.lastIndexOf("."),o=this._parts.hostname.substring(n+1);return!0!==t&&r&&r.list[o.toLowerCase()]&&r.get(this._parts.hostname)||o}var i;if(!e)throw new TypeError("cannot set TLD empty");if(e.match(/[^a-zA-Z0-9-]/)){if(!r||!r.is(e))throw new TypeError('TLD "'+e+'" contains characters other than [A-Z0-9]');i=new RegExp(u(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(i,e)}else{if(!this._parts.hostname||this.is("IP"))throw new ReferenceError("cannot set TLD on non-domain host");i=new RegExp(u(this.tld())+"$"),this._parts.hostname=this._parts.hostname.replace(i,e)}return this.build(!t),this},s.directory=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e||!0===e){if(!this._parts.path&&!this._parts.hostname)return"";if("/"===this._parts.path)return"/";var r=this._parts.path.length-this.filename().length-1,n=this._parts.path.substring(0,r)||(this._parts.hostname?"/":"");return e?i.decodePath(n):n}var o=this._parts.path.length-this.filename().length,s=this._parts.path.substring(0,o),a=new RegExp("^"+u(s));return this.is("relative")||(e||(e="/"),"/"!==e.charAt(0)&&(e="/"+e)),e&&"/"!==e.charAt(e.length-1)&&(e+="/"),e=i.recodePath(e),this._parts.path=this._parts.path.replace(a,e),this.build(!t),this},s.filename=function(e,t){if(this._parts.urn)return void 0===e?"":this;if("string"!=typeof e){if(!this._parts.path||"/"===this._parts.path)return"";var r=this._parts.path.lastIndexOf("/"),n=this._parts.path.substring(r+1);return e?i.decodePathSegment(n):n}var o=!1;"/"===e.charAt(0)&&(e=e.substring(1)),e.match(/\.?\//)&&(o=!0);var s=new RegExp(u(this.filename())+"$");return e=i.recodePath(e),this._parts.path=this._parts.path.replace(s,e),o?this.normalizePath(t):this.build(!t),this},s.suffix=function(e,t){if(this._parts.urn)return void 0===e?"":this;if(void 0===e||!0===e){if(!this._parts.path||"/"===this._parts.path)return"";var r,n,o=this.filename(),s=o.lastIndexOf(".");return-1===s?"":(r=o.substring(s+1),n=/^[a-z0-9%]+$/i.test(r)?r:"",e?i.decodePathSegment(n):n)}"."===e.charAt(0)&&(e=e.substring(1));var a,c=this.suffix();if(c)a=e?new RegExp(u(c)+"$"):new RegExp(u("."+c)+"$");else{if(!e)return this;this._parts.path+="."+i.recodePath(e)}return a&&(e=i.recodePath(e),this._parts.path=this._parts.path.replace(a,e)),this.build(!t),this},s.segment=function(e,t,r){var n=this._parts.urn?":":"/",o=this.path(),i="/"===o.substring(0,1),s=o.split(n);if(void 0!==e&&"number"!=typeof e&&(r=t,t=e,e=void 0),void 0!==e&&"number"!=typeof e)throw new Error('Bad segment "'+e+'", must be 0-based integer');if(i&&s.shift(),e<0&&(e=Math.max(s.length+e,0)),void 0===t)return void 0===e?s:s[e];if(null===e||void 0===s[e])if(l(t)){s=[];for(var a=0,u=t.length;a<u;a++)(t[a].length||s.length&&s[s.length-1].length)&&(s.length&&!s[s.length-1].length&&s.pop(),s.push(d(t[a])))}else(t||"string"==typeof t)&&(t=d(t),""===s[s.length-1]?s[s.length-1]=t:s.push(t));else t?s[e]=d(t):s.splice(e,1);return i&&s.unshift(""),this.path(s.join(n),r)},s.segmentCoded=function(e,t,r){var n,o,s;if("number"!=typeof e&&(r=t,t=e,e=void 0),void 0===t){if(l(n=this.segment(e,t,r)))for(o=0,s=n.length;o<s;o++)n[o]=i.decode(n[o]);else n=void 0!==n?i.decode(n):void 0;return n}if(l(t))for(o=0,s=t.length;o<s;o++)t[o]=i.encode(t[o]);else t="string"==typeof t||t instanceof String?i.encode(t):t;return this.segment(e,t,r)};var x=s.query;return s.query=function(e,t){if(!0===e)return i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("function"==typeof e){var r=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace),n=e.call(this,r);return this._parts.query=i.buildQuery(n||r,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!t),this}return void 0!==e&&"string"!=typeof e?(this._parts.query=i.buildQuery(e,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),this.build(!t),this):x.call(this,e,t)},s.setQuery=function(e,t,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);if("string"==typeof e||e instanceof String)n[e]=void 0!==t?t:null;else{if("object"!=typeof e)throw new TypeError("URI.addQuery() accepts an object, string as the name parameter");for(var o in e)a.call(e,o)&&(n[o]=e[o])}return this._parts.query=i.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(r=t),this.build(!r),this},s.addQuery=function(e,t,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.addQuery(n,e,void 0===t?null:t),this._parts.query=i.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(r=t),this.build(!r),this},s.removeQuery=function(e,t,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.removeQuery(n,e,t),this._parts.query=i.buildQuery(n,this._parts.duplicateQueryParameters,this._parts.escapeQuerySpace),"string"!=typeof e&&(r=t),this.build(!r),this},s.hasQuery=function(e,t,r){var n=i.parseQuery(this._parts.query,this._parts.escapeQuerySpace);return i.hasQuery(n,e,t,r)},s.setSearch=s.setQuery,s.addSearch=s.addQuery,s.removeSearch=s.removeQuery,s.hasSearch=s.hasQuery,s.normalize=function(){return this._parts.urn?this.normalizeProtocol(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build():this.normalizeProtocol(!1).normalizeHostname(!1).normalizePort(!1).normalizePath(!1).normalizeQuery(!1).normalizeFragment(!1).build()},s.normalizeProtocol=function(e){return"string"==typeof this._parts.protocol&&(this._parts.protocol=this._parts.protocol.toLowerCase(),this.build(!e)),this},s.normalizeHostname=function(r){return this._parts.hostname&&(this.is("IDN")&&e?this._parts.hostname=e.toASCII(this._parts.hostname):this.is("IPv6")&&t&&(this._parts.hostname=t.best(this._parts.hostname)),this._parts.hostname=this._parts.hostname.toLowerCase(),this.build(!r)),this},s.normalizePort=function(e){return"string"==typeof this._parts.protocol&&this._parts.port===i.defaultPorts[this._parts.protocol]&&(this._parts.port=null,this.build(!e)),this},s.normalizePath=function(e){var t,r=this._parts.path;if(!r)return this;if(this._parts.urn)return this._parts.path=i.recodeUrnPath(this._parts.path),this.build(!e),this;if("/"===this._parts.path)return this;var n,o,s="";for("/"!==(r=i.recodePath(r)).charAt(0)&&(t=!0,r="/"+r),"/.."!==r.slice(-3)&&"/."!==r.slice(-2)||(r+="/"),r=r.replace(/(\/(\.\/)+)|(\/\.$)/g,"/").replace(/\/{2,}/g,"/"),t&&(s=r.substring(1).match(/^(\.\.\/)+/)||"")&&(s=s[0]);-1!==(n=r.search(/\/\.\.(\/|$)/));)0!==n?(-1===(o=r.substring(0,n).lastIndexOf("/"))&&(o=n),r=r.substring(0,o)+r.substring(n+3)):r=r.substring(3);return t&&this.is("relative")&&(r=s+r.substring(1)),this._parts.path=r,this.build(!e),this},s.normalizePathname=s.normalizePath,s.normalizeQuery=function(e){return"string"==typeof this._parts.query&&(this._parts.query.length?this.query(i.parseQuery(this._parts.query,this._parts.escapeQuerySpace)):this._parts.query=null,this.build(!e)),this},s.normalizeFragment=function(e){return this._parts.fragment||(this._parts.fragment=null,this.build(!e)),this},s.normalizeSearch=s.normalizeQuery,s.normalizeHash=s.normalizeFragment,s.iso8859=function(){var e=i.encode,t=i.decode;i.encode=escape,i.decode=decodeURIComponent;try{this.normalize()}finally{i.encode=e,i.decode=t}return this},s.unicode=function(){var e=i.encode,t=i.decode;i.encode=m,i.decode=unescape;try{this.normalize()}finally{i.encode=e,i.decode=t}return this},s.readable=function(){var t=this.clone();t.username("").password("").normalize();var r="";if(t._parts.protocol&&(r+=t._parts.protocol+"://"),t._parts.hostname&&(t.is("punycode")&&e?(r+=e.toUnicode(t._parts.hostname),t._parts.port&&(r+=":"+t._parts.port)):r+=t.host()),t._parts.hostname&&t._parts.path&&"/"!==t._parts.path.charAt(0)&&(r+="/"),r+=t.path(!0),t._parts.query){for(var n="",o=0,s=t._parts.query.split("&"),a=s.length;o<a;o++){var u=(s[o]||"").split("=");n+="&"+i.decodeQuery(u[0],this._parts.escapeQuerySpace).replace(/&/g,"%26"),void 0!==u[1]&&(n+="="+i.decodeQuery(u[1],this._parts.escapeQuerySpace).replace(/&/g,"%26"))}r+="?"+n.substring(1)}return r+i.decodeQuery(t.hash(),!0)},s.absoluteTo=function(e){var t,r,n,o=this.clone(),s=["protocol","username","password","hostname","port"];if(this._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(e instanceof i||(e=new i(e)),o._parts.protocol)return o;if(o._parts.protocol=e._parts.protocol,this._parts.hostname)return o;for(r=0;n=s[r];r++)o._parts[n]=e._parts[n];return o._parts.path?(".."===o._parts.path.substring(-2)&&(o._parts.path+="/"),"/"!==o.path().charAt(0)&&(t=(t=e.directory())||(0===e.path().indexOf("/")?"/":""),o._parts.path=(t?t+"/":"")+o._parts.path,o.normalizePath())):(o._parts.path=e._parts.path,o._parts.query||(o._parts.query=e._parts.query)),o.build(),o},s.relativeTo=function(e){var t,r,n,o,s,a=this.clone().normalize();if(a._parts.urn)throw new Error("URNs do not have any generally defined hierarchical components");if(e=new i(e).normalize(),t=a._parts,r=e._parts,o=a.path(),s=e.path(),"/"!==o.charAt(0))throw new Error("URI is already relative");if("/"!==s.charAt(0))throw new Error("Cannot calculate a URI relative to another relative URI");if(t.protocol===r.protocol&&(t.protocol=null),t.username!==r.username||t.password!==r.password)return a.build();if(null!==t.protocol||null!==t.username||null!==t.password)return a.build();if(t.hostname!==r.hostname||t.port!==r.port)return a.build();if(t.hostname=null,t.port=null,o===s)return t.path="",a.build();if(!(n=i.commonPath(o,s)))return a.build();var u=r.path.substring(n.length).replace(/[^\/]*$/,"").replace(/.*?\//g,"../");return t.path=u+t.path.substring(n.length)||"./",a.build()},s.equals=function(e){var t,r,n,o,s,u=this.clone(),c=new i(e),h={};if(u.normalize(),c.normalize(),u.toString()===c.toString())return!0;if(n=u.query(),o=c.query(),u.query(""),c.query(""),u.toString()!==c.toString())return!1;if(n.length!==o.length)return!1;for(s in t=i.parseQuery(n,this._parts.escapeQuerySpace),r=i.parseQuery(o,this._parts.escapeQuerySpace),t)if(a.call(t,s)){if(l(t[s])){if(!p(t[s],r[s]))return!1}else if(t[s]!==r[s])return!1;h[s]=!0}for(s in r)if(a.call(r,s)&&!h[s])return!1;return!0},s.preventInvalidHostname=function(e){return this._parts.preventInvalidHostname=!!e,this},s.duplicateQueryParameters=function(e){return this._parts.duplicateQueryParameters=!!e,this},s.escapeQuerySpace=function(e){return this._parts.escapeQuerySpace=!!e,this},i}),Dr=Dr.exports;var qr=0,$r={},Hr=[],Gr=document,Vr="((-(webkit|moz|ms|o)-)?(full-screen|fullscreen))|-o-prefocus|active|checked|disabled|empty|enabled|focus|hover|in-range|invalid|link|out-of-range|target|valid|visited",Wr="((-(webkit|moz|ms|o)-)?(focus-inner|input-placeholder|placeholder|selection|resizer|scrollbar(-(button|thumb|corner|track(-piece)?))?))|-ms-(clear|reveal|expand)|-moz-(focusring)|-webkit-(details-marker)|after|before|first-letter|first-line";function Jr(){var e,t={normRule:[],fontFace:[],keyFram:[]},r=[];return new Promise(function(n,o){for(e=0;e<Gr.styleSheets.length;e++)r.push(new Promise(function(t,r){var n,o=Gr.styleSheets[e].ownerNode.href;if(o)(n=$r[o]).media=Gr.styleSheets[e].media,Zr(n).then(function(e){t(e)});else{let r=Gr.styleSheets[e].ownerNode.innerHTML.replace(/url\((['"]?)(.*?)\1\)/g,function(e,t,r){return"url("+tn(Gr.location.href,r)+")"}),n=e;en(r,Gr.location.href).then(function(e){e.media=Gr.styleSheets[n].media,Zr(e).then(function(e){t(e)})})}}));Promise.all(r).then(function(e){e.forEach(function(e){Yr.mergeobjCss(t,e)}),n(t)}).catch(function(e){o(e)})})}function Zr(e){var t=[],r={normRule:[],keyFram:[],fontFace:[]};return new Promise(function(n,o){if(void 0===e||0===e.length)n(r);else if(e.length>0){let t="";e.media&&e.media.length>0&&(t=`; media=${e.media.mediaText} `),e.href===Gr.location.href?r.normRule.push(`/*! CSS Used from: Embedded ${t}*/`):e.href&&!e.parentHref&&r.normRule.push(`/*! CSS Used from: ${e.href} ${t}*/`)}for(var i=0;i<e.length;i++)!function(r,n){t.push(new Promise(function(t,o){var i={normRule:[],keyFram:[],fontFace:[]};if("atrule"===r.type&&r.name.match(/^(-(webkit|moz|ms|o)-)?keyframes$/))i.keyFram.push(r),t(i);else if("atrule"===r.type&&"font-face"===r.name)i.fontFace.push(r),t(i);else if("atrule"===r.type&&"media"===r.name)Zr(r.nodes).then(function(e){i.normRule.push("\n@media "+r.params+"{"),Yr.mergeobjCss(i,e),i.normRule.push("}"),t(i)});else if("atrule"===r.type&&"import"===r.name){let o=!0;for(let t=0;t<n;t++){let r=e[t];if("rule"===r.type||"atrule"===r.type&&null===r.name.match(/^charset|import$/)){o=!1;break}}e.href||(o=!1);let s=r.params.match(/^(url\((['"]?)(.*?)\2\)|(['"])(.*?)\4)\s*(.*)$/),a=s[3]||s[5]||"",u=s[6];o&&(a=tn(e.href,a))&&a!==e.parentHref?new Promise((t,r)=>{void 0!==$r[a]?t($r[a]):Kr([a]).then(function(e){return e[0],en(e[0].cssraw)}).then(function(r){r.href=a,r.parentHref=e.href,$r[a]=r,t(r)})}).then(Zr).then(function(e){e.normRule.length>0?(i.normRule.push("/*! @import "+a+u+" */"),u.length&&i.normRule.push("\n@media "+u+"{"),Yr.mergeobjCss(i,e),u.length&&i.normRule.push("}"),i.normRule.push("/*! end @import */")):Yr.mergeobjCss(i,e),t(i)}):t(i)}else"rule"===r.type&&""!==r.selector?(i.normRule.push(r),t(i)):t(i)}))}(e[i],i);Promise.all(t).then(function(t){t.forEach(function(e){Yr.mergeobjCss(r,e)}),e.media&&e.media.length>0&&(r.normRule.splice(1,0,`@media ${e.media.mediaText}{`),r.normRule.push("}")),n(r)}).catch(function(e){o(e)})})}var Yr={mergeobjCss:function(e,t){["normRule","fontFace","keyFram"].forEach(function(r){!e[r]||t[r],e[r]=e[r].concat(t[r])})},normRuleNodeToText:function(e){var t="";return e.nodes.forEach(function(e,r){if(e.prop&&e.value){var n=e.raws.before.replace(/[\s]*/,"");t+=n+e.prop+":"+e.value+(e.important?"!important;":";")}}),t},keyFramNodeToText:function(e){var t="@"+e.name+" "+e.params+"{";return e.nodes.forEach(function(e){t+=e.selector+"{"+Yr.normRuleNodeToText(e)+"}"}),t+="}"},fontFaceNodeToText:function(e){var t="@"+e.name+"{";return(t+=Yr.normRuleNodeToText(e))+"}"},textToCss:function(e){var t,r=document,n=document.createElement("style");return n.innerText=e,r.body.appendChild(n),t=n.sheet,r.body.removeChild(n),t}};function Xr(e){var t={};return t.url=e,chrome.runtime.sendMessage({status:"Getting : "+e}),new Promise(function(r,n){var o=new XMLHttpRequest;o.responseType="arraybuffer",o.open("get",e),o.onload=function(){var n;this.status>=200&&this.status<300||null!==e.match(/^file:\/\/\//)?(n=c(new Uint8Array(o.response))?new TextDecoder("UTF-8"):new TextDecoder("gbk"),t.cssraw=n.decode(o.response).replace(/url\((['"]?)(.*?)\1\)/g,function(t,r,n){return`url(${r}${tn(e,n)}${r})`}),t.status=this.status,t.statusText=this.statusText,r(t),chrome.runtime.sendMessage({status:"Parsing : "+e})):(t.cssraw="",t.status=this.status,t.statusText=this.statusText,r(t))},o.onerror=function(n){console.log("Fail to get: "+e),t.cssraw="",t.status=this.status,t.statusText=this.statusText,r(t)},o.send()})}function Kr(e){var t=[];return new Promise(function(r,n){if(0===e.length)r([]);else{for(var o=0;o<e.length;o++)t.push(Xr(e[o]));Promise.all(t).then(function(e){r(e)}).catch(function(e){n(e)})}})}function en(e,t){return new Promise((r,n)=>{Sr().process(e,{from:void 0,parser:kr}).then(e=>{t&&(e.root.nodes.href=t),r(e.root.nodes)})})}function tn(e,t){new Dr(e);var r=new Dr(t);return r.is("absolute")?t:r.absoluteTo(e).toString()}return function(e){if(qr++,Hr.forEach(function(e){clearTimeout(e)}),Hr=[],null!=e&&void 0!==e.nodeName)if(e.nodeName.match(/^<pseudo:/))chrome.runtime.sendMessage({status:"It's a pseudo element"});else if("html"===e.nodeName||e.nodeName.match(/^#/))chrome.runtime.sendMessage({status:"Not for this element"});else{var t=!0;try{e.ownerDocument.defaultView.parent.document}catch(n){t=!1}if(!t||e.ownerDocument.defaultView.parent.document===document){chrome.runtime.sendMessage({status:"Preparing ..."}),Gr=e.ownerDocument;var r=[];Array.prototype.forEach.call(e.ownerDocument.querySelectorAll('link[rel~="stylesheet"][href]'),function(e){e.getAttribute("href")&&void 0===$r[e.href]&&r.push(e.href)}),Kr(r).then(function(e){for(var t=[],n=0;n<e.length;n++){let o=e[n],i=n;t.push(en(o.cssraw,r[i]))}return Promise.all(t)}).catch(function(e){chrome.runtime.sendMessage({err:JSON.stringify(e)})}).then(function(e){e.forEach(function(e){$r[e.href]=e})}).then(Jr).then(function(t){return function(e,t,r){console.log("localCount",r);var o=[],i=[],s=[],a=[],u=[];return u.push(e),Array.prototype.forEach.call(e.querySelectorAll("*"),function(e){u.push(e)}),new Promise(function(c,l){t.normRule.forEach(function(i,c){o.push(new Promise(function(o,l){var h=setTimeout(function(){if(r===qr)if(c%100==0&&chrome.runtime.sendMessage({dom:u.length-1,rule:t.normRule.length,rulenow:c}),"string"!=typeof i){var l=[];if(i.selectors.filter(function(e,t,r){return r.indexOf(e)===t}).forEach(function(t,r){if(-1===l.indexOf(t))if(t.match(new RegExp("^(:("+Vr+")|::?("+Wr+"))+$","")))l.push(t);else{let r=[],o=t.replace(new RegExp("( |^)(:("+Vr+")|::?("+Wr+"))+( |$)","ig")," * ");o=(o=o.replace(new RegExp("\\((:("+Vr+")|::?("+Wr+"))+\\)","ig"),"(*)")).replace(new RegExp("(:("+Vr+")|::?("+Wr+"))+","ig"),"");try{(e.matches(t)||0!==e.querySelectorAll(t).length)&&l.push(t)}catch(n){r.push(t),r.push(n)}try{(e.matches(o)||0!==e.querySelectorAll(o).length)&&l.push(t)}catch(n){r.push(o),r.push(n)}r.length}}),0===l.length)o("");else{var h=l.filter(function(e,t,r){return r.indexOf(e)===t}).join(",");h+="{"+Yr.normRuleNodeToText(i)+"}",o(h),i.nodes.forEach(function(e,t){e.prop&&null!==e.prop.match(/^(-(webkit|moz|ms|o)-)?animation(-name)?$/i)&&(s=s.concat(e.value.split(/ *, */).map(function(e){return e.split(" ")[0]})))});let e=Yr.textToCss(h);e.cssRules[0]&&e.cssRules[0].style.fontFamily&&(a=a.concat(e.cssRules[0].style.fontFamily.split(", ")))}}else o(i)},0);Hr.push(h)}))}),Promise.all(o).then(function(e){s=s.filter(function(e,t,r){return r.indexOf(e)===t}),a=a.filter(function(e,t,r){return r.indexOf(e)===t}),e.forEach(function(e){e.length>0&&i.push(e)});var r=!1;s.forEach(function(e){t.keyFram.forEach(function(t){e===t.params&&(r||(i.push("/*! CSS Used keyframes */"),r=!0),i.push(Yr.keyFramNodeToText(t)))})});var n=!1;a.forEach(function(e){t.fontFace.forEach(function(t){t.nodes.forEach(function(r){"font-family"===r.prop&&e.replace(/^(['"])?(.*)\1$/,"$2")===r.value.replace(/^(['"])?(.*)\1$/,"$2")&&(n||(i.push("/*! CSS Used fontfaces */"),n=!0),i.push(Yr.fontFaceNodeToText(t)))})})}),c(i)}).catch(function(e){l(e)})})}(e,t,qr)}).then(function(e){return t=(t=(t=e).map(function(e){return e.replace(/[\n\r]/g," ")})).join("\n"),new Promise((e,r)=>{for(var n=/^[^{}\n]*{\s*}/gm,o=/\n\n/g,i=/\/\*! @import.*\n\/\*! end @import \*\//g;null!==t.match(n)||null!==t.match(o)||null!==t.match(i);)t=(t=(t=t.replace(n,"")).replace(o,"\n")).replace(i,"");e(t=t.replace(/^\s*/gm,""))});var t}).then(function(t){chrome.runtime.sendMessage({css:function(e){var t=(e=e.split(/\n+/)).length,r=e.indexOf("/*! CSS Used fontfaces */"),n=e.indexOf("/*! CSS Used keyframes */");for(-1!==n?t=n:-1!==r&&(t=r);e.length>0&&null!==e[t-1].match(/^\/\*! |^$/);)e.splice(t-1,1),t--;for(var o=[],i=/^\/\*! CSS Used from: /,s=0;s<t;s++)(null===e[s].match(i)||s+1!==t&&null===e[s+1].match(i))&&o.push(e[s]);return(o=o.concat(e.slice(t))).join("\n").replace(/(['"']?)\u5fae\u8f6f\u96c5\u9ed1\1/,'"Microsoft Yahei"')}(t),html:e.outerHTML.replace(/<script[\s\S]*?>[\s\S]*?<\/script>/gi,"").replace(/<style[\s\S]*?>[\s\S]*?<\/style>/gi,"").replace(/<link[\s\S]*?>/gi,"").replace(/(<img[^>]+src=(['"]))(.*?)(\2.*?>)/g,function(){var e=tn(Gr.location.href,arguments[3]);return arguments[1]+e+arguments[4]}).replace(/(<img[^>]+srcset=(['"]))(.*?)(\2.*?>)/g,function(){var e=arguments[3].split(/,\s*/);return e.forEach(function(t,r){var n=t.replace(/([^ ]*)(.*)/,function(){return tn(Gr.location.href,arguments[1])+" "+arguments[2]});e[r]=n}),arguments[1]+e.join(",")+arguments[4]})})})}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,